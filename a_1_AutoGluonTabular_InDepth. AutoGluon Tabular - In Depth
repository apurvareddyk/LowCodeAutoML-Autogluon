{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyN6wY07xaMdsrD25ojUji4o"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"5e59fdbb72cd42e3a8308d1f3d39b3c6":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f10cd2a2aa0f4be4bc53ca615bd64b35","IPY_MODEL_35fc95c3f9024b21b15ff9bb707ae84b","IPY_MODEL_aec5dfe77dcc4380897cecdaa4ff3a9e"],"layout":"IPY_MODEL_5abe201720a74d548d1e9e264202fc71"}},"f10cd2a2aa0f4be4bc53ca615bd64b35":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_192a045efb2441a48557bf4e6f4268c4","placeholder":"​","style":"IPY_MODEL_f40cde3cd0bc4caa90495165810dd2c5","value":"100%"}},"35fc95c3f9024b21b15ff9bb707ae84b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_091724baf13144de9325639b2f25e12b","max":5,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e917f2f5be6c44fca5bcdaac482426b3","value":5}},"aec5dfe77dcc4380897cecdaa4ff3a9e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8b02013fe1ce44b18c2e2b716e3c2474","placeholder":"​","style":"IPY_MODEL_28f6a7b640a44834b4147540434c1aeb","value":" 5/5 [00:05&lt;00:00,  1.04it/s]"}},"5abe201720a74d548d1e9e264202fc71":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"192a045efb2441a48557bf4e6f4268c4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f40cde3cd0bc4caa90495165810dd2c5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"091724baf13144de9325639b2f25e12b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e917f2f5be6c44fca5bcdaac482426b3":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8b02013fe1ce44b18c2e2b716e3c2474":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"28f6a7b640a44834b4147540434c1aeb":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# AutoGluon Tabular - In Depth"],"metadata":{"id":"Oiz_ClK-U4FY"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ibDjv-NKUsj2","outputId":"45289bd4-0551-4dce-8280-07bba2b2a3ed"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting autogluon.tabular[all]\n","  Downloading autogluon.tabular-1.1.1-py3-none-any.whl.metadata (13 kB)\n","Requirement already satisfied: numpy<1.29,>=1.21 in /usr/local/lib/python3.10/dist-packages (from autogluon.tabular[all]) (1.26.4)\n","Collecting scipy<1.13,>=1.5.4 (from autogluon.tabular[all])\n","  Downloading scipy-1.12.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.4/60.4 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pandas<2.3.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from autogluon.tabular[all]) (2.1.4)\n","Requirement already satisfied: scikit-learn<1.4.1,>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from autogluon.tabular[all]) (1.3.2)\n","Requirement already satisfied: networkx<4,>=3.0 in /usr/local/lib/python3.10/dist-packages (from autogluon.tabular[all]) (3.3)\n","Collecting autogluon.core==1.1.1 (from autogluon.tabular[all])\n","  Downloading autogluon.core-1.1.1-py3-none-any.whl.metadata (11 kB)\n"]}],"source":["!pip install autogluon.tabular[all]"]},{"cell_type":"code","source":["from autogluon.tabular import TabularDataset, TabularPredictor\n","\n","import numpy as np\n","\n","train_data = TabularDataset('https://autogluon.s3.amazonaws.com/datasets/Inc/train.csv')\n","subsample_size = 1000  # subsample subset of data for faster demo, try setting this to much larger values\n","train_data = train_data.sample(n=subsample_size, random_state=0)\n","print(train_data.head())\n","\n","label = 'occupation'\n","print(\"Summary of occupation column: \\n\", train_data['occupation'].describe())\n","\n","test_data = TabularDataset('https://autogluon.s3.amazonaws.com/datasets/Inc/test.csv')\n","y_test = test_data[label]\n","test_data_nolabel = test_data.drop(columns=[label])  # delete label column\n","\n","metric = 'accuracy' # we specify eval-metric just for demo (unnecessary as it's the default)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4atXuxqeVKOT","executionInfo":{"status":"ok","timestamp":1726549333931,"user_tz":420,"elapsed":6712,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"4c7858ca-ccae-40b7-a189-0446b8a92e05"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       age workclass  fnlwgt      education  education-num  \\\n","6118    51   Private   39264   Some-college             10   \n","23204   58   Private   51662           10th              6   \n","29590   40   Private  326310   Some-college             10   \n","18116   37   Private  222450        HS-grad              9   \n","33964   62   Private  109190      Bachelors             13   \n","\n","            marital-status        occupation    relationship    race      sex  \\\n","6118    Married-civ-spouse   Exec-managerial            Wife   White   Female   \n","23204   Married-civ-spouse     Other-service            Wife   White   Female   \n","29590   Married-civ-spouse      Craft-repair         Husband   White     Male   \n","18116        Never-married             Sales   Not-in-family   White     Male   \n","33964   Married-civ-spouse   Exec-managerial         Husband   White     Male   \n","\n","       capital-gain  capital-loss  hours-per-week  native-country   class  \n","6118              0             0              40   United-States    >50K  \n","23204             0             0               8   United-States   <=50K  \n","29590             0             0              44   United-States   <=50K  \n","18116             0          2339              40     El-Salvador   <=50K  \n","33964         15024             0              40   United-States    >50K  \n","Summary of occupation column: \n"," count              1000\n","unique               15\n","top        Craft-repair\n","freq                142\n","Name: occupation, dtype: object\n"]}]},{"cell_type":"code","source":["from autogluon.common import space\n","\n","nn_options = {  # specifies non-default hyperparameter values for neural network models\n","    'num_epochs': 10,  # number of training epochs (controls training time of NN models)\n","    'learning_rate': space.Real(1e-4, 1e-2, default=5e-4, log=True),  # learning rate used in training (real-valued hyperparameter searched on log-scale)\n","    'activation': space.Categorical('relu', 'softrelu', 'tanh'),  # activation function used in NN (categorical hyperparameter, default = first entry)\n","    'dropout_prob': space.Real(0.0, 0.5, default=0.1),  # dropout probability (real-valued hyperparameter)\n","}\n","\n","gbm_options = {  # specifies non-default hyperparameter values for lightGBM gradient boosted trees\n","    'num_boost_round': 100,  # number of boosting rounds (controls training time of GBM models)\n","    'num_leaves': space.Int(lower=26, upper=66, default=36),  # number of leaves in trees (integer hyperparameter)\n","}\n","\n","hyperparameters = {  # hyperparameters of each model type\n","                   'GBM': gbm_options,\n","                   'NN_TORCH': nn_options,  # NOTE: comment this line out if you get errors on Mac OSX\n","                  }  # When these keys are missing from hyperparameters dict, no models of that type are trained\n","\n","time_limit = 2*60  # train various models for ~2 min\n","num_trials = 5  # try at most 5 different hyperparameter configurations for each type of model\n","search_strategy = 'auto'  # to tune hyperparameters using random search routine with a local scheduler\n","\n","hyperparameter_tune_kwargs = {  # HPO is not performed unless hyperparameter_tune_kwargs is specified\n","    'num_trials': num_trials,\n","    'scheduler' : 'local',\n","    'searcher': search_strategy,\n","}  # Refer to TabularPredictor.fit docstring for all valid values\n","\n","predictor = TabularPredictor(label=label, eval_metric=metric).fit(\n","    train_data,\n","    time_limit=time_limit,\n","    hyperparameters=hyperparameters,\n","    hyperparameter_tune_kwargs=hyperparameter_tune_kwargs,\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["5e59fdbb72cd42e3a8308d1f3d39b3c6","f10cd2a2aa0f4be4bc53ca615bd64b35","35fc95c3f9024b21b15ff9bb707ae84b","aec5dfe77dcc4380897cecdaa4ff3a9e","5abe201720a74d548d1e9e264202fc71","192a045efb2441a48557bf4e6f4268c4","f40cde3cd0bc4caa90495165810dd2c5","091724baf13144de9325639b2f25e12b","e917f2f5be6c44fca5bcdaac482426b3","8b02013fe1ce44b18c2e2b716e3c2474","28f6a7b640a44834b4147540434c1aeb"]},"id":"DrX9H8VaVLKK","executionInfo":{"status":"ok","timestamp":1726549407902,"user_tz":420,"elapsed":67306,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"05a6020f-3eed-4774-ad45-e061bdd91fbf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["No path specified. Models will be saved in: \"AutogluonModels/ag-20240917_050220\"\n","Verbosity: 2 (Standard Logging)\n","=================== System Info ===================\n","AutoGluon Version:  1.1.1\n","Python Version:     3.10.12\n","Operating System:   Linux\n","Platform Machine:   x86_64\n","Platform Version:   #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024\n","CPU Count:          2\n","Memory Avail:       10.91 GB / 12.67 GB (86.1%)\n","Disk Space Avail:   65.95 GB / 107.72 GB (61.2%)\n","===================================================\n","No presets specified! To achieve strong results with AutoGluon, it is recommended to use the available presets.\n","\tRecommended Presets (For more details refer to https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets):\n","\tpresets='best_quality'   : Maximize accuracy. Default time_limit=3600.\n","\tpresets='high_quality'   : Strong accuracy with fast inference speed. Default time_limit=3600.\n","\tpresets='good_quality'   : Good accuracy with very fast inference speed. Default time_limit=3600.\n","\tpresets='medium_quality' : Fast training time, ideal for initial prototyping.\n","Warning: hyperparameter tuning is currently experimental and may cause the process to hang.\n","Beginning AutoGluon training ... Time limit = 120s\n","AutoGluon will save models to \"AutogluonModels/ag-20240917_050220\"\n","Train Data Rows:    1000\n","Train Data Columns: 14\n","Label Column:       occupation\n","AutoGluon infers your prediction problem is: 'multiclass' (because dtype of label-column == object).\n","\tFirst 10 (of 15) unique label values:  [' Exec-managerial', ' Other-service', ' Craft-repair', ' Sales', ' Prof-specialty', ' Protective-serv', ' ?', ' Adm-clerical', ' Machine-op-inspct', ' Tech-support']\n","\tIf 'multiclass' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])\n","Problem Type:       multiclass\n","Preprocessing data ...\n","Warning: Some classes in the training set have fewer than 10 examples. AutoGluon will only keep 13 out of 15 classes for training and will not try to predict the rare classes. To keep more classes, increase the number of datapoints from these rare classes in the training data or reduce label_count_threshold.\n","Fraction of data from classes with at least 10 examples that will be kept for training models: 0.996\n","Train Data Class Count: 13\n","Using Feature Generators to preprocess the data ...\n","Fitting AutoMLPipelineFeatureGenerator...\n","\tAvailable Memory:                    11172.44 MB\n","\tTrain Data (Original)  Memory Usage: 0.55 MB (0.0% of available memory)\n","\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n","\tStage 1 Generators:\n","\t\tFitting AsTypeFeatureGenerator...\n","\t\t\tNote: Converting 2 features to boolean dtype as they only contain 2 unique values.\n","\tStage 2 Generators:\n","\t\tFitting FillNaFeatureGenerator...\n","\tStage 3 Generators:\n","\t\tFitting IdentityFeatureGenerator...\n","\t\tFitting CategoryFeatureGenerator...\n","\t\t\tFitting CategoryMemoryMinimizeFeatureGenerator...\n","\tStage 4 Generators:\n","\t\tFitting DropUniqueFeatureGenerator...\n","\tStage 5 Generators:\n","\t\tFitting DropDuplicatesFeatureGenerator...\n","\tTypes of features in original data (raw dtype, special dtypes):\n","\t\t('int', [])    : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('object', []) : 8 | ['workclass', 'education', 'marital-status', 'relationship', 'race', ...]\n","\tTypes of features in processed data (raw dtype, special dtypes):\n","\t\t('category', [])  : 6 | ['workclass', 'education', 'marital-status', 'relationship', 'race', ...]\n","\t\t('int', [])       : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('int', ['bool']) : 2 | ['sex', 'class']\n","\t0.2s = Fit runtime\n","\t14 features in original data used to generate 14 features in processed data.\n","\tTrain Data (Processed) Memory Usage: 0.06 MB (0.0% of available memory)\n","Data preprocessing and feature engineering runtime = 0.27s ...\n","AutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n","\tTo change this, specify the eval_metric parameter of Predictor()\n","Automatically generating train/validation split with holdout_frac=0.2, Train Rows: 796, Val Rows: 200\n","User-specified model hyperparameters to be fit:\n","{\n","\t'GBM': {'num_boost_round': 100, 'num_leaves': Int: lower=26, upper=66},\n","\t'NN_TORCH': {'num_epochs': 10, 'learning_rate': Real: lower=0.0001, upper=0.01, 'activation': Categorical['relu', 'softrelu', 'tanh'], 'dropout_prob': Real: lower=0.0, upper=0.5},\n","}\n","Fitting 2 L1 models ...\n","Hyperparameter tuning model: LightGBM ... Tuning model for up to 53.88s of the 119.72s of remaining time.\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/5 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5e59fdbb72cd42e3a8308d1f3d39b3c6"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/dask/dataframe/__init__.py:42: FutureWarning: \n","Dask dataframe query planning is disabled because dask-expr is not installed.\n","\n","You can install it with `pip install dask[dataframe]` or `conda install dask`.\n","This will raise in a future version.\n","\n","  warnings.warn(msg, FutureWarning)\n","Fitted model: LightGBM/T1 ...\n","\t0.37\t = Validation score   (accuracy)\n","\t2.37s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitted model: LightGBM/T2 ...\n","\t0.355\t = Validation score   (accuracy)\n","\t0.75s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitted model: LightGBM/T3 ...\n","\t0.375\t = Validation score   (accuracy)\n","\t0.52s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitted model: LightGBM/T4 ...\n","\t0.36\t = Validation score   (accuracy)\n","\t0.78s\t = Training   runtime\n","\t0.03s\t = Validation runtime\n","Fitted model: LightGBM/T5 ...\n","\t0.375\t = Validation score   (accuracy)\n","\t0.74s\t = Training   runtime\n","\t0.02s\t = Validation runtime\n","Hyperparameter tuning model: NeuralNetTorch ... Tuning model for up to 53.88s of the 110.82s of remaining time.\n"]},{"output_type":"stream","name":"stdout","text":["+---------------------------------------------------+\n","| Configuration for experiment     NeuralNetTorch   |\n","+---------------------------------------------------+\n","| Search algorithm                 SearchGenerator  |\n","| Scheduler                        FIFOScheduler    |\n","| Number of trials                 5                |\n","+---------------------------------------------------+\n","\n","View detailed results here: /content/AutogluonModels/ag-20240917_050220/models/NeuralNetTorch\n"]},{"output_type":"stream","name":"stderr","text":["Fitted model: NeuralNetTorch/4d73a8ca ...\n","\t0.355\t = Validation score   (accuracy)\n","\t10.07s\t = Training   runtime\n","\t0.02s\t = Validation runtime\n","Fitted model: NeuralNetTorch/3fd710bf ...\n","\t0.325\t = Validation score   (accuracy)\n","\t11.44s\t = Training   runtime\n","\t0.1s\t = Validation runtime\n","Fitted model: NeuralNetTorch/523ef36b ...\n","\t0.37\t = Validation score   (accuracy)\n","\t8.56s\t = Training   runtime\n","\t0.03s\t = Validation runtime\n","Fitted model: NeuralNetTorch/c7f8a80a ...\n","\t0.32\t = Validation score   (accuracy)\n","\t8.95s\t = Training   runtime\n","\t0.03s\t = Validation runtime\n"]},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"stream","name":"stderr","text":["Fitting model: WeightedEnsemble_L2 ... Training model for up to 119.73s of the 53.15s of remaining time.\n","\tEnsemble Weights: {'LightGBM/T1': 0.4, 'LightGBM/T5': 0.15, 'NeuralNetTorch/523ef36b': 0.15, 'LightGBM/T2': 0.1, 'LightGBM/T3': 0.1, 'LightGBM/T4': 0.05, 'NeuralNetTorch/3fd710bf': 0.05}\n","\t0.395\t = Validation score   (accuracy)\n","\t0.14s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n","AutoGluon training complete, total runtime = 67.08s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 1006.8 rows/s (200 batch size)\n","TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels/ag-20240917_050220\")\n"]}]},{"cell_type":"code","source":["y_pred = predictor.predict(test_data_nolabel)\n","print(\"Predictions:  \", list(y_pred)[:5])\n","perf = predictor.evaluate(test_data, auxiliary_metrics=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tqXj2uk0VQkB","executionInfo":{"status":"ok","timestamp":1726550001787,"user_tz":420,"elapsed":5968,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"8e4101e1-2d23-49ca-8c98-a7301df3f6cb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions:   [' Other-service', ' Farming-fishing', ' Sales', ' Sales', ' Other-service']\n"]}]},{"cell_type":"code","source":["results = predictor.fit_summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FaMiIZEDVTw8","executionInfo":{"status":"ok","timestamp":1726550011104,"user_tz":420,"elapsed":1146,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"6cf2565b-f822-4e76-c80d-bb3980642fba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["*** Summary of fit() ***\n","Estimated performance of each model:\n","                     model  score_val eval_metric  pred_time_val   fit_time  pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  fit_order\n","0      WeightedEnsemble_L2      0.395    accuracy       0.198647  25.316235                0.001610           0.142878            2       True         10\n","1              LightGBM/T3      0.375    accuracy       0.008616   0.524073                0.008616           0.524073            1       True          3\n","2              LightGBM/T5      0.375    accuracy       0.015495   0.739458                0.015495           0.739458            1       True          5\n","3              LightGBM/T1      0.370    accuracy       0.006300   2.373981                0.006300           2.373981            1       True          1\n","4  NeuralNetTorch/523ef36b      0.370    accuracy       0.027949   8.564571                0.027949           8.564571            1       True          8\n","5              LightGBM/T4      0.360    accuracy       0.031817   0.780565                0.031817           0.780565            1       True          4\n","6              LightGBM/T2      0.355    accuracy       0.011796   0.752304                0.011796           0.752304            1       True          2\n","7  NeuralNetTorch/4d73a8ca      0.355    accuracy       0.022548  10.073117                0.022548          10.073117            1       True          6\n","8  NeuralNetTorch/3fd710bf      0.325    accuracy       0.095063  11.438406                0.095063          11.438406            1       True          7\n","9  NeuralNetTorch/c7f8a80a      0.320    accuracy       0.025423   8.950275                0.025423           8.950275            1       True          9\n","Number of models trained: 10\n","Types of models trained:\n","{'TabularNeuralNetTorchModel', 'LGBModel', 'WeightedEnsembleModel'}\n","Bagging used: False \n","Multi-layer stack-ensembling used: False \n","Feature Metadata (Processed):\n","(raw dtype, special dtypes):\n","('category', [])  : 6 | ['workclass', 'education', 'marital-status', 'relationship', 'race', ...]\n","('int', [])       : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","('int', ['bool']) : 2 | ['sex', 'class']\n","Plot summary of models saved to file: AutogluonModels/ag-20240917_050220SummaryOfModels.html\n","*** End of fit() summary ***\n"]}]},{"cell_type":"code","source":["label = 'class'  # Now lets predict the \"class\" column (binary classification)\n","test_data_nolabel = test_data.drop(columns=[label])\n","y_test = test_data[label]\n","save_path = 'agModels-predictClass'  # folder where to store trained models\n","\n","predictor = TabularPredictor(label=label, eval_metric=metric).fit(train_data,\n","    num_bag_folds=5, num_bag_sets=1, num_stack_levels=1,\n","    hyperparameters = {'NN_TORCH': {'num_epochs': 2}, 'GBM': {'num_boost_round': 20}},  # last  argument is just for quick demo here, omit it in real applications\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lTmTcgq5VV5J","executionInfo":{"status":"ok","timestamp":1726550129280,"user_tz":420,"elapsed":111515,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"f86fc427-f85f-42cf-912f-b4ebf79dca3e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["No path specified. Models will be saved in: \"AutogluonModels/ag-20240917_051337\"\n","Verbosity: 2 (Standard Logging)\n","=================== System Info ===================\n","AutoGluon Version:  1.1.1\n","Python Version:     3.10.12\n","Operating System:   Linux\n","Platform Machine:   x86_64\n","Platform Version:   #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024\n","CPU Count:          2\n","Memory Avail:       10.35 GB / 12.67 GB (81.7%)\n","Disk Space Avail:   65.93 GB / 107.72 GB (61.2%)\n","===================================================\n","No presets specified! To achieve strong results with AutoGluon, it is recommended to use the available presets.\n","\tRecommended Presets (For more details refer to https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets):\n","\tpresets='best_quality'   : Maximize accuracy. Default time_limit=3600.\n","\tpresets='high_quality'   : Strong accuracy with fast inference speed. Default time_limit=3600.\n","\tpresets='good_quality'   : Good accuracy with very fast inference speed. Default time_limit=3600.\n","\tpresets='medium_quality' : Fast training time, ideal for initial prototyping.\n","Beginning AutoGluon training ...\n","AutoGluon will save models to \"AutogluonModels/ag-20240917_051337\"\n","Train Data Rows:    1000\n","Train Data Columns: 14\n","Label Column:       class\n","AutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).\n","\t2 unique label values:  [' >50K', ' <=50K']\n","\tIf 'binary' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])\n","Problem Type:       binary\n","Preprocessing data ...\n","Selected class <--> label mapping:  class 1 =  >50K, class 0 =  <=50K\n","\tNote: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive ( >50K) vs negative ( <=50K) class.\n","\tTo explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n","Using Feature Generators to preprocess the data ...\n","Fitting AutoMLPipelineFeatureGenerator...\n","\tAvailable Memory:                    10602.56 MB\n","\tTrain Data (Original)  Memory Usage: 0.56 MB (0.0% of available memory)\n","\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n","\tStage 1 Generators:\n","\t\tFitting AsTypeFeatureGenerator...\n","\t\t\tNote: Converting 1 features to boolean dtype as they only contain 2 unique values.\n","\tStage 2 Generators:\n","\t\tFitting FillNaFeatureGenerator...\n","\tStage 3 Generators:\n","\t\tFitting IdentityFeatureGenerator...\n","\t\tFitting CategoryFeatureGenerator...\n","\t\t\tFitting CategoryMemoryMinimizeFeatureGenerator...\n","\tStage 4 Generators:\n","\t\tFitting DropUniqueFeatureGenerator...\n","\tStage 5 Generators:\n","\t\tFitting DropDuplicatesFeatureGenerator...\n","\tTypes of features in original data (raw dtype, special dtypes):\n","\t\t('int', [])    : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('object', []) : 8 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\tTypes of features in processed data (raw dtype, special dtypes):\n","\t\t('category', [])  : 7 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\t\t('int', [])       : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('int', ['bool']) : 1 | ['sex']\n","\t0.3s = Fit runtime\n","\t14 features in original data used to generate 14 features in processed data.\n","\tTrain Data (Processed) Memory Usage: 0.06 MB (0.0% of available memory)\n","Data preprocessing and feature engineering runtime = 0.35s ...\n","AutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n","\tTo change this, specify the eval_metric parameter of Predictor()\n","User-specified model hyperparameters to be fit:\n","{\n","\t'NN_TORCH': {'num_epochs': 2},\n","\t'GBM': {'num_boost_round': 20},\n","}\n","AutoGluon will fit 2 stack levels (L1 to L2) ...\n","Fitting 2 L1 models ...\n","Fitting model: LightGBM_BAG_L1 ...\n","\tFitting 5 child models (S1F1 - S1F5) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.03%)\n","\t0.823\t = Validation score   (accuracy)\n","\t15.53s\t = Training   runtime\n","\t0.07s\t = Validation runtime\n","Fitting model: NeuralNetTorch_BAG_L1 ...\n","\tFitting 5 child models (S1F1 - S1F5) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.00%)\n","\t0.744\t = Validation score   (accuracy)\n","\t30.71s\t = Training   runtime\n","\t0.25s\t = Validation runtime\n","Fitting model: WeightedEnsemble_L2 ...\n","\tEnsemble Weights: {'LightGBM_BAG_L1': 1.0}\n","\t0.823\t = Validation score   (accuracy)\n","\t0.04s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n","Fitting 2 L2 models ...\n","Fitting model: LightGBM_BAG_L2 ...\n","\tFitting 5 child models (S1F1 - S1F5) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.03%)\n","\t0.828\t = Validation score   (accuracy)\n","\t15.01s\t = Training   runtime\n","\t0.05s\t = Validation runtime\n","Fitting model: NeuralNetTorch_BAG_L2 ...\n","\tFitting 5 child models (S1F1 - S1F5) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.00%)\n","\t0.748\t = Validation score   (accuracy)\n","\t27.2s\t = Training   runtime\n","\t0.17s\t = Validation runtime\n","Fitting model: WeightedEnsemble_L3 ...\n","\tEnsemble Weights: {'LightGBM_BAG_L2': 0.833, 'LightGBM_BAG_L1': 0.167}\n","\t0.829\t = Validation score   (accuracy)\n","\t0.13s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n","AutoGluon training complete, total runtime = 111.26s ... Best model: WeightedEnsemble_L3 | Estimated inference throughput: 545.2 rows/s (200 batch size)\n","TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels/ag-20240917_051337\")\n"]}]},{"cell_type":"code","source":["# Lets also specify the \"f1\" metric\n","predictor = TabularPredictor(label=label, eval_metric='f1', path=save_path).fit(\n","    train_data, auto_stack=True,\n","    time_limit=30, hyperparameters={'FASTAI': {'num_epochs': 10}, 'GBM': {'num_boost_round': 200}}  # last 2 arguments are for quick demo, omit them in real applications\n",")\n","predictor.leaderboard(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"2Rn-C4hhVhv-","executionInfo":{"status":"ok","timestamp":1726550225794,"user_tz":420,"elapsed":38462,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"6cb959e9-3529-4fae-d3a0-ed4391ec30a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Verbosity: 2 (Standard Logging)\n","=================== System Info ===================\n","AutoGluon Version:  1.1.1\n","Python Version:     3.10.12\n","Operating System:   Linux\n","Platform Machine:   x86_64\n","Platform Version:   #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024\n","CPU Count:          2\n","Memory Avail:       10.35 GB / 12.67 GB (81.6%)\n","Disk Space Avail:   65.93 GB / 107.72 GB (61.2%)\n","===================================================\n","No presets specified! To achieve strong results with AutoGluon, it is recommended to use the available presets.\n","\tRecommended Presets (For more details refer to https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets):\n","\tpresets='best_quality'   : Maximize accuracy. Default time_limit=3600.\n","\tpresets='high_quality'   : Strong accuracy with fast inference speed. Default time_limit=3600.\n","\tpresets='good_quality'   : Good accuracy with very fast inference speed. Default time_limit=3600.\n","\tpresets='medium_quality' : Fast training time, ideal for initial prototyping.\n","Stack configuration (auto_stack=True): num_stack_levels=0, num_bag_folds=8, num_bag_sets=5\n","Beginning AutoGluon training ... Time limit = 30s\n","AutoGluon will save models to \"agModels-predictClass\"\n","Train Data Rows:    1000\n","Train Data Columns: 14\n","Label Column:       class\n","AutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).\n","\t2 unique label values:  [' >50K', ' <=50K']\n","\tIf 'binary' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])\n","Problem Type:       binary\n","Preprocessing data ...\n","Selected class <--> label mapping:  class 1 =  >50K, class 0 =  <=50K\n","\tNote: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive ( >50K) vs negative ( <=50K) class.\n","\tTo explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n","Using Feature Generators to preprocess the data ...\n","Fitting AutoMLPipelineFeatureGenerator...\n","\tAvailable Memory:                    10594.71 MB\n","\tTrain Data (Original)  Memory Usage: 0.56 MB (0.0% of available memory)\n","\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n","\tStage 1 Generators:\n","\t\tFitting AsTypeFeatureGenerator...\n","\t\t\tNote: Converting 1 features to boolean dtype as they only contain 2 unique values.\n","\tStage 2 Generators:\n","\t\tFitting FillNaFeatureGenerator...\n","\tStage 3 Generators:\n","\t\tFitting IdentityFeatureGenerator...\n","\t\tFitting CategoryFeatureGenerator...\n","\t\t\tFitting CategoryMemoryMinimizeFeatureGenerator...\n","\tStage 4 Generators:\n","\t\tFitting DropUniqueFeatureGenerator...\n","\tStage 5 Generators:\n","\t\tFitting DropDuplicatesFeatureGenerator...\n","\tTypes of features in original data (raw dtype, special dtypes):\n","\t\t('int', [])    : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('object', []) : 8 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\tTypes of features in processed data (raw dtype, special dtypes):\n","\t\t('category', [])  : 7 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\t\t('int', [])       : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('int', ['bool']) : 1 | ['sex']\n","\t0.2s = Fit runtime\n","\t14 features in original data used to generate 14 features in processed data.\n","\tTrain Data (Processed) Memory Usage: 0.06 MB (0.0% of available memory)\n","Data preprocessing and feature engineering runtime = 0.25s ...\n","AutoGluon will gauge predictive performance using evaluation metric: 'f1'\n","\tTo change this, specify the eval_metric parameter of Predictor()\n","User-specified model hyperparameters to be fit:\n","{\n","\t'FASTAI': {'num_epochs': 10},\n","\t'GBM': {'num_boost_round': 200},\n","}\n","Fitting 2 L1 models ...\n","Fitting model: LightGBM_BAG_L1 ... Training model for up to 29.75s of the 29.75s of remaining time.\n","\tFitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.03%)\n","\t0.6856\t = Validation score   (f1)\n","\t31.4s\t = Training   runtime\n","\t0.12s\t = Validation runtime\n","Completed 1/5 k-fold bagging repeats ...\n","Fitting model: WeightedEnsemble_L2 ... Training model for up to 29.75s of the -7.35s of remaining time.\n","\tEnsemble Weights: {'LightGBM_BAG_L1': 1.0}\n","\t0.6856\t = Validation score   (f1)\n","\t0.02s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n","AutoGluon training complete, total runtime = 37.41s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 1053.1 rows/s (125 batch size)\n","TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"agModels-predictClass\")\n"]},{"output_type":"execute_result","data":{"text/plain":["                 model  score_test  score_val eval_metric  pred_time_test  \\\n","0      LightGBM_BAG_L1    0.629437    0.68559          f1        1.225314   \n","1  WeightedEnsemble_L2    0.629437    0.68559          f1        1.228502   \n","\n","   pred_time_val   fit_time  pred_time_test_marginal  pred_time_val_marginal  \\\n","0       0.118130  31.397663                 1.225314                0.118130   \n","1       0.122686  31.416290                 0.003188                0.004556   \n","\n","   fit_time_marginal  stack_level  can_infer  fit_order  \n","0          31.397663            1       True          1  \n","1           0.018627            2       True          2  "],"text/html":["\n","  <div id=\"df-479b677c-ea08-44fa-8174-564a938e546b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_test</th>\n","      <th>score_val</th>\n","      <th>eval_metric</th>\n","      <th>pred_time_test</th>\n","      <th>pred_time_val</th>\n","      <th>fit_time</th>\n","      <th>pred_time_test_marginal</th>\n","      <th>pred_time_val_marginal</th>\n","      <th>fit_time_marginal</th>\n","      <th>stack_level</th>\n","      <th>can_infer</th>\n","      <th>fit_order</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LightGBM_BAG_L1</td>\n","      <td>0.629437</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>1.225314</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>1.225314</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WeightedEnsemble_L2</td>\n","      <td>0.629437</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>1.228502</td>\n","      <td>0.122686</td>\n","      <td>31.416290</td>\n","      <td>0.003188</td>\n","      <td>0.004556</td>\n","      <td>0.018627</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-479b677c-ea08-44fa-8174-564a938e546b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-479b677c-ea08-44fa-8174-564a938e546b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-479b677c-ea08-44fa-8174-564a938e546b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c2c05249-4eea-416e-bea5-b5983a98ced7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c2c05249-4eea-416e-bea5-b5983a98ced7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c2c05249-4eea-416e-bea5-b5983a98ced7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"predictor\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"WeightedEnsemble_L2\",\n          \"LightGBM_BAG_L1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.6294365847604865,\n        \"max\": 0.6294365847604865,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6294365847604865\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.685589519650655,\n        \"max\": 0.685589519650655,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.685589519650655\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"eval_metric\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"f1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0022540134583626126,\n        \"min\": 1.2253143787384033,\n        \"max\": 1.2285020351409912,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.2285020351409912\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0032213679253846527,\n        \"min\": 0.11813044548034668,\n        \"max\": 0.12268614768981934,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.12268614768981934\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013171564509230559,\n        \"min\": 31.39766263961792,\n        \"max\": 31.416290044784546,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          31.416290044784546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.864174092832944,\n        \"min\": 0.0031876564025878906,\n        \"max\": 1.2253143787384033,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0031876564025878906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08030947113835622,\n        \"min\": 0.004555702209472656,\n        \"max\": 0.11813044548034668,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.004555702209472656\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.188328601372117,\n        \"min\": 0.018627405166625977,\n        \"max\": 31.39766263961792,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.018627405166625977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stack_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"can_infer\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_order\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["print(f'Prior to calibration (predictor.decision_threshold={predictor.decision_threshold}):')\n","scores = predictor.evaluate(test_data)\n","\n","calibrated_decision_threshold = predictor.calibrate_decision_threshold()\n","predictor.set_decision_threshold(calibrated_decision_threshold)\n","\n","print(f'After calibration (predictor.decision_threshold={predictor.decision_threshold}):')\n","scores_calibrated = predictor.evaluate(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6pp9h7ScVkOT","executionInfo":{"status":"ok","timestamp":1726550319945,"user_tz":420,"elapsed":2232,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"e272824a-fb42-4455-d602-668849acdf60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Prior to calibration (predictor.decision_threshold=0.5):\n"]},{"output_type":"stream","name":"stderr","text":["Calibrating decision threshold to optimize metric f1 | Checking 51 thresholds...\n","Calibrating decision threshold via fine-grained search | Checking 38 thresholds...\n","\tBase Threshold: 0.500\t| val: 0.6856\n","\tBest Threshold: 0.500\t| val: 0.6856\n"]},{"output_type":"stream","name":"stdout","text":["After calibration (predictor.decision_threshold=0.5):\n"]}]},{"cell_type":"code","source":["for metric_name in scores:\n","    metric_score = scores[metric_name]\n","    metric_score_calibrated = scores_calibrated[metric_name]\n","    decision_threshold = predictor.decision_threshold\n","    print(f'decision_threshold={decision_threshold:.3f}\\t| metric=\"{metric_name}\"'\n","          f'\\n\\ttest_score uncalibrated: {metric_score:.4f}'\n","          f'\\n\\ttest_score   calibrated: {metric_score_calibrated:.4f}'\n","          f'\\n\\ttest_score        delta: {metric_score_calibrated-metric_score:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i2_fMvcKVo3b","executionInfo":{"status":"ok","timestamp":1726550323814,"user_tz":420,"elapsed":848,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"3879917f-e4e9-4ed4-c589-b5ce611208cd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["decision_threshold=0.500\t| metric=\"f1\"\n","\ttest_score uncalibrated: 0.6294\n","\ttest_score   calibrated: 0.6294\n","\ttest_score        delta: 0.0000\n","decision_threshold=0.500\t| metric=\"accuracy\"\n","\ttest_score uncalibrated: 0.8472\n","\ttest_score   calibrated: 0.8472\n","\ttest_score        delta: 0.0000\n","decision_threshold=0.500\t| metric=\"balanced_accuracy\"\n","\ttest_score uncalibrated: 0.7438\n","\ttest_score   calibrated: 0.7438\n","\ttest_score        delta: 0.0000\n","decision_threshold=0.500\t| metric=\"mcc\"\n","\ttest_score uncalibrated: 0.5457\n","\ttest_score   calibrated: 0.5457\n","\ttest_score        delta: 0.0000\n","decision_threshold=0.500\t| metric=\"roc_auc\"\n","\ttest_score uncalibrated: 0.8990\n","\ttest_score   calibrated: 0.8990\n","\ttest_score        delta: 0.0000\n","decision_threshold=0.500\t| metric=\"precision\"\n","\ttest_score uncalibrated: 0.7411\n","\ttest_score   calibrated: 0.7411\n","\ttest_score        delta: 0.0000\n","decision_threshold=0.500\t| metric=\"recall\"\n","\ttest_score uncalibrated: 0.5470\n","\ttest_score   calibrated: 0.5470\n","\ttest_score        delta: 0.0000\n"]}]},{"cell_type":"code","source":["predictor.set_decision_threshold(0.5)  # Reset decision threshold\n","for metric_name in ['f1', 'balanced_accuracy', 'mcc']:\n","    metric_score = predictor.evaluate(test_data, silent=True)[metric_name]\n","    calibrated_decision_threshold = predictor.calibrate_decision_threshold(metric=metric_name, verbose=False)\n","    metric_score_calibrated = predictor.evaluate(\n","        test_data, decision_threshold=calibrated_decision_threshold, silent=True\n","    )[metric_name]\n","    print(f'decision_threshold={calibrated_decision_threshold:.3f}\\t| metric=\"{metric_name}\"'\n","          f'\\n\\ttest_score uncalibrated: {metric_score:.4f}'\n","          f'\\n\\ttest_score   calibrated: {metric_score_calibrated:.4f}'\n","          f'\\n\\ttest_score        delta: {metric_score_calibrated-metric_score:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"khXDJfKjVsUx","executionInfo":{"status":"ok","timestamp":1726550333966,"user_tz":420,"elapsed":6986,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"601d7819-ca4e-444d-f5e6-843e6d1fa7d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["decision_threshold=0.500\t| metric=\"f1\"\n","\ttest_score uncalibrated: 0.6294\n","\ttest_score   calibrated: 0.6294\n","\ttest_score        delta: 0.0000\n","decision_threshold=0.250\t| metric=\"balanced_accuracy\"\n","\ttest_score uncalibrated: 0.7438\n","\ttest_score   calibrated: 0.8120\n","\ttest_score        delta: 0.0682\n","decision_threshold=0.500\t| metric=\"mcc\"\n","\ttest_score uncalibrated: 0.5457\n","\ttest_score   calibrated: 0.5457\n","\ttest_score        delta: 0.0000\n"]}]},{"cell_type":"code","source":["predictor = TabularPredictor.load(save_path)  # `predictor.path` is another way to get the relative path needed to later load predictor."],"metadata":{"id":"motHE-QRVvUb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predictor.features()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-gc9BK8wVyln","executionInfo":{"status":"ok","timestamp":1726550371883,"user_tz":420,"elapsed":208,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"1c2eed09-a138-4809-fe24-1e314cbf592a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['age',\n"," 'workclass',\n"," 'fnlwgt',\n"," 'education',\n"," 'education-num',\n"," 'marital-status',\n"," 'occupation',\n"," 'relationship',\n"," 'race',\n"," 'sex',\n"," 'capital-gain',\n"," 'capital-loss',\n"," 'hours-per-week',\n"," 'native-country']"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["datapoint = test_data_nolabel.iloc[[0]]  # Note: .iloc[0] won't work because it returns pandas Series instead of DataFrame\n","print(datapoint)\n","predictor.predict(datapoint)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":250},"id":"yKWGFckbV0iR","executionInfo":{"status":"ok","timestamp":1726550375034,"user_tz":420,"elapsed":315,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"e6f95852-690f-4025-d86b-34e4cef66947"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   age workclass  fnlwgt education  education-num       marital-status  \\\n","0   31   Private  169085      11th              7   Married-civ-spouse   \n","\n","  occupation relationship    race      sex  capital-gain  capital-loss  \\\n","0      Sales         Wife   White   Female             0             0   \n","\n","   hours-per-week  native-country  \n","0              20   United-States  \n"]},{"output_type":"execute_result","data":{"text/plain":["0     <=50K\n","Name: class, dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["predictor.predict_proba(datapoint)  # returns a DataFrame that shows which probability corresponds to which class"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"lVycKHkZV1HQ","executionInfo":{"status":"ok","timestamp":1726550378146,"user_tz":420,"elapsed":311,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"419a1f3e-6205-46d1-903a-9f94c1377ec5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      <=50K      >50K\n","0  0.951059  0.048941"],"text/html":["\n","  <div id=\"df-d5d25023-40c8-4462-ad86-845123d16139\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>&lt;=50K</th>\n","      <th>&gt;50K</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.951059</td>\n","      <td>0.048941</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5d25023-40c8-4462-ad86-845123d16139')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d5d25023-40c8-4462-ad86-845123d16139 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d5d25023-40c8-4462-ad86-845123d16139');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"predictor\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \" <=50K\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9510592222213745,\n        \"max\": 0.9510592222213745,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9510592222213745\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" >50K\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0489407554268837,\n        \"max\": 0.0489407554268837,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0489407554268837\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["predictor.model_best"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"IOB1U0jCV3FR","executionInfo":{"status":"ok","timestamp":1726550380567,"user_tz":420,"elapsed":326,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"38366874-c7b7-4340-c166-1a6375b95165"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'WeightedEnsemble_L2'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["predictor.leaderboard(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":131},"id":"4hc6vc8yV79A","executionInfo":{"status":"ok","timestamp":1726550396242,"user_tz":420,"elapsed":1365,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"859c3b82-1cbc-4b17-912c-33fcaffc883e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 model  score_test  score_val eval_metric  pred_time_test  \\\n","0      LightGBM_BAG_L1    0.629437    0.68559          f1        0.988973   \n","1  WeightedEnsemble_L2    0.629437    0.68559          f1        0.993140   \n","\n","   pred_time_val   fit_time  pred_time_test_marginal  pred_time_val_marginal  \\\n","0       0.118130  31.397663                 0.988973                0.118130   \n","1       0.122686  31.416290                 0.004167                0.004556   \n","\n","   fit_time_marginal  stack_level  can_infer  fit_order  \n","0          31.397663            1       True          1  \n","1           0.018627            2       True          2  "],"text/html":["\n","  <div id=\"df-aa04ea1e-63db-4d99-8c35-d64d072e8e4b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_test</th>\n","      <th>score_val</th>\n","      <th>eval_metric</th>\n","      <th>pred_time_test</th>\n","      <th>pred_time_val</th>\n","      <th>fit_time</th>\n","      <th>pred_time_test_marginal</th>\n","      <th>pred_time_val_marginal</th>\n","      <th>fit_time_marginal</th>\n","      <th>stack_level</th>\n","      <th>can_infer</th>\n","      <th>fit_order</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LightGBM_BAG_L1</td>\n","      <td>0.629437</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>0.988973</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>0.988973</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WeightedEnsemble_L2</td>\n","      <td>0.629437</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>0.993140</td>\n","      <td>0.122686</td>\n","      <td>31.416290</td>\n","      <td>0.004167</td>\n","      <td>0.004556</td>\n","      <td>0.018627</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa04ea1e-63db-4d99-8c35-d64d072e8e4b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-aa04ea1e-63db-4d99-8c35-d64d072e8e4b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-aa04ea1e-63db-4d99-8c35-d64d072e8e4b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-620f9598-64fb-417f-b4fe-80f1a5d43ff7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-620f9598-64fb-417f-b4fe-80f1a5d43ff7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-620f9598-64fb-417f-b4fe-80f1a5d43ff7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"predictor\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"WeightedEnsemble_L2\",\n          \"LightGBM_BAG_L1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.6294365847604865,\n        \"max\": 0.6294365847604865,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6294365847604865\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.685589519650655,\n        \"max\": 0.685589519650655,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.685589519650655\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"eval_metric\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"f1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0029465704730936237,\n        \"min\": 0.9889726638793945,\n        \"max\": 0.9931397438049316,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9931397438049316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0032213679253846527,\n        \"min\": 0.11813044548034668,\n        \"max\": 0.12268614768981934,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.12268614768981934\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013171564509230559,\n        \"min\": 31.39766263961792,\n        \"max\": 31.416290044784546,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          31.416290044784546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6963627065641504,\n        \"min\": 0.004167079925537109,\n        \"max\": 0.9889726638793945,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.004167079925537109\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08030947113835622,\n        \"min\": 0.004555702209472656,\n        \"max\": 0.11813044548034668,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.004555702209472656\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.188328601372117,\n        \"min\": 0.018627405166625977,\n        \"max\": 31.39766263961792,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.018627405166625977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stack_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"can_infer\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_order\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["predictor.leaderboard(extra_info=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":228},"id":"lENJT2-9WBwX","executionInfo":{"status":"ok","timestamp":1726550449887,"user_tz":420,"elapsed":3930,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"04f73308-459f-448f-812a-1bedb3b4c52f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 model  score_val eval_metric  pred_time_val   fit_time  \\\n","0      LightGBM_BAG_L1    0.68559          f1       0.118130  31.397663   \n","1  WeightedEnsemble_L2    0.68559          f1       0.122686  31.416290   \n","\n","   pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  \\\n","0                0.118130          31.397663            1       True   \n","1                0.004556           0.018627            2       True   \n","\n","   fit_order  ...                                    hyperparameters  \\\n","0          1  ...  {'use_orig_features': True, 'max_base_models':...   \n","1          2  ...  {'use_orig_features': False, 'max_base_models'...   \n","\n","   hyperparameters_fit                                        ag_args_fit  \\\n","0                   {}  {'max_memory_usage_ratio': 1.0, 'max_time_limi...   \n","1                   {}  {'max_memory_usage_ratio': 1.0, 'max_time_limi...   \n","\n","                                            features  compile_time  \\\n","0  [sex, native-country, workclass, education-num...          None   \n","1                                  [LightGBM_BAG_L1]          None   \n","\n","                              child_hyperparameters  \\\n","0   {'learning_rate': 0.05, 'num_boost_round': 200}   \n","1  {'ensemble_size': 25, 'subsample_size': 1000000}   \n","\n","   child_hyperparameters_fit  \\\n","0    {'num_boost_round': 83}   \n","1       {'ensemble_size': 1}   \n","\n","                                   child_ag_args_fit          ancestors  \\\n","0  {'max_memory_usage_ratio': 1.0, 'max_time_limi...                 []   \n","1  {'max_memory_usage_ratio': 1.0, 'max_time_limi...  [LightGBM_BAG_L1]   \n","\n","             descendants  \n","0  [WeightedEnsemble_L2]  \n","1                     []  \n","\n","[2 rows x 32 columns]"],"text/html":["\n","  <div id=\"df-606a6003-3449-4a46-97f2-561dedfd1fcc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_val</th>\n","      <th>eval_metric</th>\n","      <th>pred_time_val</th>\n","      <th>fit_time</th>\n","      <th>pred_time_val_marginal</th>\n","      <th>fit_time_marginal</th>\n","      <th>stack_level</th>\n","      <th>can_infer</th>\n","      <th>fit_order</th>\n","      <th>...</th>\n","      <th>hyperparameters</th>\n","      <th>hyperparameters_fit</th>\n","      <th>ag_args_fit</th>\n","      <th>features</th>\n","      <th>compile_time</th>\n","      <th>child_hyperparameters</th>\n","      <th>child_hyperparameters_fit</th>\n","      <th>child_ag_args_fit</th>\n","      <th>ancestors</th>\n","      <th>descendants</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LightGBM_BAG_L1</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>{'use_orig_features': True, 'max_base_models':...</td>\n","      <td>{}</td>\n","      <td>{'max_memory_usage_ratio': 1.0, 'max_time_limi...</td>\n","      <td>[sex, native-country, workclass, education-num...</td>\n","      <td>None</td>\n","      <td>{'learning_rate': 0.05, 'num_boost_round': 200}</td>\n","      <td>{'num_boost_round': 83}</td>\n","      <td>{'max_memory_usage_ratio': 1.0, 'max_time_limi...</td>\n","      <td>[]</td>\n","      <td>[WeightedEnsemble_L2]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WeightedEnsemble_L2</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>0.122686</td>\n","      <td>31.416290</td>\n","      <td>0.004556</td>\n","      <td>0.018627</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>{'use_orig_features': False, 'max_base_models'...</td>\n","      <td>{}</td>\n","      <td>{'max_memory_usage_ratio': 1.0, 'max_time_limi...</td>\n","      <td>[LightGBM_BAG_L1]</td>\n","      <td>None</td>\n","      <td>{'ensemble_size': 25, 'subsample_size': 1000000}</td>\n","      <td>{'ensemble_size': 1}</td>\n","      <td>{'max_memory_usage_ratio': 1.0, 'max_time_limi...</td>\n","      <td>[LightGBM_BAG_L1]</td>\n","      <td>[]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2 rows × 32 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-606a6003-3449-4a46-97f2-561dedfd1fcc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-606a6003-3449-4a46-97f2-561dedfd1fcc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-606a6003-3449-4a46-97f2-561dedfd1fcc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-88075510-5eb2-4b97-a8f1-73d20c7f5939\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-88075510-5eb2-4b97-a8f1-73d20c7f5939')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-88075510-5eb2-4b97-a8f1-73d20c7f5939 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["predictor.leaderboard(test_data, extra_metrics=['accuracy', 'balanced_accuracy', 'log_loss'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":131},"id":"ZiTYQUOHWEUq","executionInfo":{"status":"ok","timestamp":1726550454230,"user_tz":420,"elapsed":1143,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"8f3bf6ba-61ac-46df-a862-0333d030f167"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 model  score_test  accuracy  balanced_accuracy  log_loss  \\\n","0      LightGBM_BAG_L1    0.629437   0.84717           0.743784 -0.334022   \n","1  WeightedEnsemble_L2    0.629437   0.84717           0.743784 -0.334022   \n","\n","   score_val eval_metric  pred_time_test  pred_time_val   fit_time  \\\n","0    0.68559          f1        0.765251       0.118130  31.397663   \n","1    0.68559          f1        0.767547       0.122686  31.416290   \n","\n","   pred_time_test_marginal  pred_time_val_marginal  fit_time_marginal  \\\n","0                 0.765251                0.118130          31.397663   \n","1                 0.002296                0.004556           0.018627   \n","\n","   stack_level  can_infer  fit_order  \n","0            1       True          1  \n","1            2       True          2  "],"text/html":["\n","  <div id=\"df-fb2fdaa3-263c-4096-8afc-4538e309c03e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_test</th>\n","      <th>accuracy</th>\n","      <th>balanced_accuracy</th>\n","      <th>log_loss</th>\n","      <th>score_val</th>\n","      <th>eval_metric</th>\n","      <th>pred_time_test</th>\n","      <th>pred_time_val</th>\n","      <th>fit_time</th>\n","      <th>pred_time_test_marginal</th>\n","      <th>pred_time_val_marginal</th>\n","      <th>fit_time_marginal</th>\n","      <th>stack_level</th>\n","      <th>can_infer</th>\n","      <th>fit_order</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LightGBM_BAG_L1</td>\n","      <td>0.629437</td>\n","      <td>0.84717</td>\n","      <td>0.743784</td>\n","      <td>-0.334022</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>0.765251</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>0.765251</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WeightedEnsemble_L2</td>\n","      <td>0.629437</td>\n","      <td>0.84717</td>\n","      <td>0.743784</td>\n","      <td>-0.334022</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>0.767547</td>\n","      <td>0.122686</td>\n","      <td>31.416290</td>\n","      <td>0.002296</td>\n","      <td>0.004556</td>\n","      <td>0.018627</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb2fdaa3-263c-4096-8afc-4538e309c03e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fb2fdaa3-263c-4096-8afc-4538e309c03e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fb2fdaa3-263c-4096-8afc-4538e309c03e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-46c15dbc-f627-4453-a84f-22e885b149cf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46c15dbc-f627-4453-a84f-22e885b149cf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-46c15dbc-f627-4453-a84f-22e885b149cf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"predictor\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"WeightedEnsemble_L2\",\n          \"LightGBM_BAG_L1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.6294365847604865,\n        \"max\": 0.6294365847604865,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6294365847604865\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.847169618179957,\n        \"max\": 0.847169618179957,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.847169618179957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"balanced_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.7437840946238461,\n        \"max\": 0.7437840946238461,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7437840946238461\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": -0.33402176023620583,\n        \"max\": -0.33402176023620583,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.33402176023620583\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.685589519650655,\n        \"max\": 0.685589519650655,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.685589519650655\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"eval_metric\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"f1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0016236651920336818,\n        \"min\": 0.7652511596679688,\n        \"max\": 0.7675473690032959,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7675473690032959\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0032213679253846527,\n        \"min\": 0.11813044548034668,\n        \"max\": 0.12268614768981934,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.12268614768981934\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013171564509230559,\n        \"min\": 31.39766263961792,\n        \"max\": 31.416290044784546,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          31.416290044784546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5394906191200565,\n        \"min\": 0.0022962093353271484,\n        \"max\": 0.7652511596679688,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0022962093353271484\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08030947113835622,\n        \"min\": 0.004555702209472656,\n        \"max\": 0.11813044548034668,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.004555702209472656\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.188328601372117,\n        \"min\": 0.018627405166625977,\n        \"max\": 31.39766263961792,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.018627405166625977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stack_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"can_infer\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_order\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["i = 0  # index of model to use\n","model_to_use = predictor.model_names()[i]\n","model_pred = predictor.predict(datapoint, model=model_to_use)\n","print(\"Prediction from %s model: %s\" % (model_to_use, model_pred.iloc[0]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a3C0N4B-WHrQ","executionInfo":{"status":"ok","timestamp":1726550456229,"user_tz":420,"elapsed":210,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"c2650994-31f4-4546-ea15-56b2203d580e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Prediction from LightGBM_BAG_L1 model:  <=50K\n"]}]},{"cell_type":"code","source":["all_models = predictor.model_names()\n","model_to_use = all_models[i]\n","specific_model = predictor._trainer.load_model(model_to_use)\n","\n","# Objects defined below are dicts of various information (not printed here as they are quite large):\n","model_info = specific_model.get_info()\n","predictor_information = predictor.info()"],"metadata":{"id":"91cXzLH0WIZG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_proba = predictor.predict_proba(test_data_nolabel)\n","perf = predictor.evaluate_predictions(y_true=y_test, y_pred=y_pred_proba)"],"metadata":{"id":"aPsPWN8GWS93"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["perf = predictor.evaluate(test_data)"],"metadata":{"id":"1hFkqdsVWVAE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predictor.feature_importance(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":534},"id":"7I3RQwyXWWvv","executionInfo":{"status":"ok","timestamp":1726550539241,"user_tz":420,"elapsed":31317,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"3908e8d5-b70f-47bb-cc9b-7e820da2fa3c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Computing feature importance via permutation shuffling for 14 features using 5000 rows with 5 shuffle sets...\n","\t34.72s\t= Expected runtime (6.94s per shuffle set)\n","\t30.89s\t= Actual runtime (Completed 5 of 5 shuffle sets)\n"]},{"output_type":"execute_result","data":{"text/plain":["                importance    stddev       p_value  n  p99_high   p99_low\n","marital-status    0.117047  0.009311  4.765349e-06  5  0.136219  0.097875\n","capital-gain      0.083102  0.004023  6.569424e-07  5  0.091385  0.074819\n","education-num     0.071497  0.006756  9.453208e-06  5  0.085407  0.057587\n","age               0.055806  0.009717  1.059856e-04  5  0.075814  0.035799\n","occupation        0.055400  0.013509  3.925863e-04  5  0.083214  0.027585\n","relationship      0.020842  0.006809  1.192225e-03  5  0.034861  0.006822\n","hours-per-week    0.018326  0.006083  1.264850e-03  5  0.030850  0.005802\n","capital-loss      0.003712  0.002108  8.495976e-03  5  0.008052 -0.000628\n","education         0.000719  0.001339  1.480534e-01  5  0.003477 -0.002038\n","native-country    0.000000  0.000000  5.000000e-01  5  0.000000  0.000000\n","race             -0.000400  0.000422  9.495569e-01  5  0.000468 -0.001268\n","sex              -0.001557  0.001984  9.229631e-01  5  0.002527 -0.005642\n","workclass        -0.002854  0.004633  8.797961e-01  5  0.006685 -0.012392\n","fnlwgt           -0.007351  0.002614  9.983654e-01  5 -0.001968 -0.012734"],"text/html":["\n","  <div id=\"df-a96e9bdd-f2dc-4cdc-aefc-ac8de5c45860\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>importance</th>\n","      <th>stddev</th>\n","      <th>p_value</th>\n","      <th>n</th>\n","      <th>p99_high</th>\n","      <th>p99_low</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>marital-status</th>\n","      <td>0.117047</td>\n","      <td>0.009311</td>\n","      <td>4.765349e-06</td>\n","      <td>5</td>\n","      <td>0.136219</td>\n","      <td>0.097875</td>\n","    </tr>\n","    <tr>\n","      <th>capital-gain</th>\n","      <td>0.083102</td>\n","      <td>0.004023</td>\n","      <td>6.569424e-07</td>\n","      <td>5</td>\n","      <td>0.091385</td>\n","      <td>0.074819</td>\n","    </tr>\n","    <tr>\n","      <th>education-num</th>\n","      <td>0.071497</td>\n","      <td>0.006756</td>\n","      <td>9.453208e-06</td>\n","      <td>5</td>\n","      <td>0.085407</td>\n","      <td>0.057587</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0.055806</td>\n","      <td>0.009717</td>\n","      <td>1.059856e-04</td>\n","      <td>5</td>\n","      <td>0.075814</td>\n","      <td>0.035799</td>\n","    </tr>\n","    <tr>\n","      <th>occupation</th>\n","      <td>0.055400</td>\n","      <td>0.013509</td>\n","      <td>3.925863e-04</td>\n","      <td>5</td>\n","      <td>0.083214</td>\n","      <td>0.027585</td>\n","    </tr>\n","    <tr>\n","      <th>relationship</th>\n","      <td>0.020842</td>\n","      <td>0.006809</td>\n","      <td>1.192225e-03</td>\n","      <td>5</td>\n","      <td>0.034861</td>\n","      <td>0.006822</td>\n","    </tr>\n","    <tr>\n","      <th>hours-per-week</th>\n","      <td>0.018326</td>\n","      <td>0.006083</td>\n","      <td>1.264850e-03</td>\n","      <td>5</td>\n","      <td>0.030850</td>\n","      <td>0.005802</td>\n","    </tr>\n","    <tr>\n","      <th>capital-loss</th>\n","      <td>0.003712</td>\n","      <td>0.002108</td>\n","      <td>8.495976e-03</td>\n","      <td>5</td>\n","      <td>0.008052</td>\n","      <td>-0.000628</td>\n","    </tr>\n","    <tr>\n","      <th>education</th>\n","      <td>0.000719</td>\n","      <td>0.001339</td>\n","      <td>1.480534e-01</td>\n","      <td>5</td>\n","      <td>0.003477</td>\n","      <td>-0.002038</td>\n","    </tr>\n","    <tr>\n","      <th>native-country</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>5.000000e-01</td>\n","      <td>5</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>race</th>\n","      <td>-0.000400</td>\n","      <td>0.000422</td>\n","      <td>9.495569e-01</td>\n","      <td>5</td>\n","      <td>0.000468</td>\n","      <td>-0.001268</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>-0.001557</td>\n","      <td>0.001984</td>\n","      <td>9.229631e-01</td>\n","      <td>5</td>\n","      <td>0.002527</td>\n","      <td>-0.005642</td>\n","    </tr>\n","    <tr>\n","      <th>workclass</th>\n","      <td>-0.002854</td>\n","      <td>0.004633</td>\n","      <td>8.797961e-01</td>\n","      <td>5</td>\n","      <td>0.006685</td>\n","      <td>-0.012392</td>\n","    </tr>\n","    <tr>\n","      <th>fnlwgt</th>\n","      <td>-0.007351</td>\n","      <td>0.002614</td>\n","      <td>9.983654e-01</td>\n","      <td>5</td>\n","      <td>-0.001968</td>\n","      <td>-0.012734</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a96e9bdd-f2dc-4cdc-aefc-ac8de5c45860')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a96e9bdd-f2dc-4cdc-aefc-ac8de5c45860 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a96e9bdd-f2dc-4cdc-aefc-ac8de5c45860');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b3090600-81bd-4faa-b399-deda5bcba7af\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3090600-81bd-4faa-b399-deda5bcba7af')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b3090600-81bd-4faa-b399-deda5bcba7af button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"predictor\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"importance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03970159695004696,\n        \"min\": -0.007350672688096638,\n        \"max\": 0.11704681093498373,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.0,\n          -0.0015571526075094599,\n          0.11704681093498373\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stddev\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0039645970328823135,\n        \"min\": 0.0,\n        \"max\": 0.01350867073128891,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.0,\n          0.0019837367412096733,\n          0.0093111182649275\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p_value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.43029616473992677,\n        \"min\": 6.569424155026294e-07,\n        \"max\": 0.9983654022104883,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.5,\n          0.9229631401015995,\n          4.765348822782085e-06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 5,\n        \"max\": 5,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p99_high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04558396357269941,\n        \"min\": -0.001967696087655582,\n        \"max\": 0.13621853213580024,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p99_low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.034753564291899706,\n        \"min\": -0.012733649288537693,\n        \"max\": 0.09787508973416723,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["predictor.persist()\n","\n","num_test = 20\n","preds = np.array(['']*num_test, dtype='object')\n","for i in range(num_test):\n","    datapoint = test_data_nolabel.iloc[[i]]\n","    pred_numpy = predictor.predict(datapoint, as_pandas=False)\n","    preds[i] = pred_numpy[0]\n","\n","perf = predictor.evaluate_predictions(y_test[:num_test], preds, auxiliary_metrics=True)\n","print(\"Predictions: \", preds)\n","\n","predictor.unpersist()  # free memory by clearing models, future predict() calls will load models from disk"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c_PUv4zKWZMC","executionInfo":{"status":"ok","timestamp":1726550645307,"user_tz":420,"elapsed":4336,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"13638d68-ad5d-41b7-bbde-07decdb56a77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Persisting 2 models in memory. Models will require 0.02% of memory.\n","Unpersisted 2 models: ['WeightedEnsemble_L2', 'LightGBM_BAG_L1']\n"]},{"output_type":"stream","name":"stdout","text":["Predictions:  [' <=50K' ' <=50K' ' >50K' ' <=50K' ' <=50K' ' >50K' ' >50K' ' >50K'\n"," ' <=50K' ' <=50K' ' <=50K' ' <=50K' ' <=50K' ' <=50K' ' <=50K' ' <=50K'\n"," ' <=50K' ' >50K' ' >50K' ' <=50K']\n"]},{"output_type":"execute_result","data":{"text/plain":["['WeightedEnsemble_L2', 'LightGBM_BAG_L1']"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# At most 0.05 ms per row (20000 rows per second throughput)\n","infer_limit = 0.00005\n","# adhere to infer_limit with batches of size 10000 (batch-inference, easier to satisfy infer_limit)\n","infer_limit_batch_size = 10000\n","# adhere to infer_limit with batches of size 1 (online-inference, much harder to satisfy infer_limit)\n","# infer_limit_batch_size = 1  # Note that infer_limit<0.02 when infer_limit_batch_size=1 can be difficult to satisfy.\n","predictor_infer_limit = TabularPredictor(label=label, eval_metric=metric).fit(\n","    train_data=train_data,\n","    time_limit=30,\n","    infer_limit=infer_limit,\n","    infer_limit_batch_size=infer_limit_batch_size,\n",")\n","\n","# NOTE: If bagging was enabled, it is important to call refit_full at this stage.\n","#  infer_limit assumes that the user will call refit_full after fit.\n","# predictor_infer_limit.refit_full()\n","\n","# NOTE: To align with inference speed calculated during fit, models must be persisted.\n","predictor_infer_limit.persist()\n","# Below is an optimized version that only persists the minimum required models for prediction.\n","# predictor_infer_limit.persist('best')\n","\n","predictor_infer_limit.leaderboard()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"OHIYtbaMWbcU","executionInfo":{"status":"ok","timestamp":1726550673160,"user_tz":420,"elapsed":27863,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"a16865cb-2e50-4d31-c988-18a199cac369"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["No path specified. Models will be saved in: \"AutogluonModels/ag-20240917_052405\"\n","Verbosity: 2 (Standard Logging)\n","=================== System Info ===================\n","AutoGluon Version:  1.1.1\n","Python Version:     3.10.12\n","Operating System:   Linux\n","Platform Machine:   x86_64\n","Platform Version:   #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024\n","CPU Count:          2\n","Memory Avail:       10.33 GB / 12.67 GB (81.5%)\n","Disk Space Avail:   65.92 GB / 107.72 GB (61.2%)\n","===================================================\n","No presets specified! To achieve strong results with AutoGluon, it is recommended to use the available presets.\n","\tRecommended Presets (For more details refer to https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets):\n","\tpresets='best_quality'   : Maximize accuracy. Default time_limit=3600.\n","\tpresets='high_quality'   : Strong accuracy with fast inference speed. Default time_limit=3600.\n","\tpresets='good_quality'   : Good accuracy with very fast inference speed. Default time_limit=3600.\n","\tpresets='medium_quality' : Fast training time, ideal for initial prototyping.\n","Beginning AutoGluon training ... Time limit = 30s\n","AutoGluon will save models to \"AutogluonModels/ag-20240917_052405\"\n","Train Data Rows:    1000\n","Train Data Columns: 14\n","Label Column:       class\n","AutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).\n","\t2 unique label values:  [' >50K', ' <=50K']\n","\tIf 'binary' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])\n","Problem Type:       binary\n","Preprocessing data ...\n","Selected class <--> label mapping:  class 1 =  >50K, class 0 =  <=50K\n","\tNote: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive ( >50K) vs negative ( <=50K) class.\n","\tTo explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n","Using Feature Generators to preprocess the data ...\n","Fitting AutoMLPipelineFeatureGenerator...\n","\tAvailable Memory:                    10583.03 MB\n","\tTrain Data (Original)  Memory Usage: 0.56 MB (0.0% of available memory)\n","\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n","\tStage 1 Generators:\n","\t\tFitting AsTypeFeatureGenerator...\n","\t\t\tNote: Converting 1 features to boolean dtype as they only contain 2 unique values.\n","\tStage 2 Generators:\n","\t\tFitting FillNaFeatureGenerator...\n","\tStage 3 Generators:\n","\t\tFitting IdentityFeatureGenerator...\n","\t\tFitting CategoryFeatureGenerator...\n","\t\t\tFitting CategoryMemoryMinimizeFeatureGenerator...\n","\tStage 4 Generators:\n","\t\tFitting DropUniqueFeatureGenerator...\n","\tStage 5 Generators:\n","\t\tFitting DropDuplicatesFeatureGenerator...\n","\tTypes of features in original data (raw dtype, special dtypes):\n","\t\t('int', [])    : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('object', []) : 8 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\tTypes of features in processed data (raw dtype, special dtypes):\n","\t\t('category', [])  : 7 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\t\t('int', [])       : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('int', ['bool']) : 1 | ['sex']\n","\t0.2s = Fit runtime\n","\t14 features in original data used to generate 14 features in processed data.\n","\tTrain Data (Processed) Memory Usage: 0.06 MB (0.0% of available memory)\n","\t2.24μs\t= Feature Preprocessing Time (1 row | 10000 batch size)\n","\t\tFeature Preprocessing requires 4.48% of the overall inference constraint (0.05ms)\n","\t\t0.048ms inference time budget remaining for models...\n","Data preprocessing and feature engineering runtime = 0.28s ...\n","AutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n","\tTo change this, specify the eval_metric parameter of Predictor()\n","Automatically generating train/validation split with holdout_frac=0.2, Train Rows: 800, Val Rows: 200\n","User-specified model hyperparameters to be fit:\n","{\n","\t'NN_TORCH': {},\n","\t'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, 'GBMLarge'],\n","\t'CAT': {},\n","\t'XGB': {},\n","\t'FASTAI': {},\n","\t'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n","\t'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n","\t'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],\n","}\n","Fitting 13 L1 models ...\n","Fitting model: KNeighborsUnif ... Training model for up to 29.72s of the 29.72s of remaining time.\n","\t0.725\t = Validation score   (accuracy)\n","\t0.05s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","\t3.879μs\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t3.879μs\t = Validation runtime (1 row | 10000 batch size)\n","\t3.879μs\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t3.879μs\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: KNeighborsDist ... Training model for up to 29.63s of the 29.63s of remaining time.\n","\t0.71\t = Validation score   (accuracy)\n","\t0.06s\t = Training   runtime\n","\t0.02s\t = Validation runtime\n","\t4.042μs\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t4.042μs\t = Validation runtime (1 row | 10000 batch size)\n","\t4.042μs\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t4.042μs\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: LightGBMXT ... Training model for up to 29.54s of the 29.53s of remaining time.\n","\t0.85\t = Validation score   (accuracy)\n","\t0.56s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","\t8.397μs\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t8.397μs\t = Validation runtime (1 row | 10000 batch size)\n","\t8.397μs\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t8.397μs\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: LightGBM ... Training model for up to 28.94s of the 28.93s of remaining time.\n","\t0.84\t = Validation score   (accuracy)\n","\t0.6s\t = Training   runtime\n","\t0.02s\t = Validation runtime\n","\t6.411μs\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t6.411μs\t = Validation runtime (1 row | 10000 batch size)\n","\t6.411μs\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t6.411μs\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: RandomForestGini ... Training model for up to 28.3s of the 28.29s of remaining time.\n","\t0.84\t = Validation score   (accuracy)\n","\t2.15s\t = Training   runtime\n","\t0.09s\t = Validation runtime\n","\t0.056ms\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t0.056ms\t = Validation runtime (1 row | 10000 batch size)\n","\t0.056ms\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t0.056ms\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: RandomForestEntr ... Training model for up to 26.0s of the 26.0s of remaining time.\n","\t0.835\t = Validation score   (accuracy)\n","\t2.12s\t = Training   runtime\n","\t0.12s\t = Validation runtime\n","\t0.061ms\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t0.061ms\t = Validation runtime (1 row | 10000 batch size)\n","\t0.061ms\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t0.061ms\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: CatBoost ... Training model for up to 23.72s of the 23.72s of remaining time.\n","\t0.86\t = Validation score   (accuracy)\n","\t5.45s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","\t2.466μs\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t2.466μs\t = Validation runtime (1 row | 10000 batch size)\n","\t2.466μs\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t2.466μs\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: ExtraTreesGini ... Training model for up to 18.24s of the 18.24s of remaining time.\n","\t0.815\t = Validation score   (accuracy)\n","\t1.26s\t = Training   runtime\n","\t0.11s\t = Validation runtime\n","\t0.035ms\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t0.035ms\t = Validation runtime (1 row | 10000 batch size)\n","\t0.035ms\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t0.035ms\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: ExtraTreesEntr ... Training model for up to 16.8s of the 16.8s of remaining time.\n","\t0.82\t = Validation score   (accuracy)\n","\t1.26s\t = Training   runtime\n","\t0.1s\t = Validation runtime\n","\t0.033ms\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t0.033ms\t = Validation runtime (1 row | 10000 batch size)\n","\t0.033ms\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t0.033ms\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: NeuralNetFastAI ... Training model for up to 15.37s of the 15.37s of remaining time.\n","No improvement since epoch 7: early stopping\n","\t0.84\t = Validation score   (accuracy)\n","\t2.99s\t = Training   runtime\n","\t0.02s\t = Validation runtime\n","\t0.036ms\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t0.036ms\t = Validation runtime (1 row | 10000 batch size)\n","\t0.036ms\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t0.036ms\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: XGBoost ... Training model for up to 12.29s of the 12.29s of remaining time.\n","\t0.845\t = Validation score   (accuracy)\n","\t0.78s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","\t5.803μs\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t5.803μs\t = Validation runtime (1 row | 10000 batch size)\n","\t5.803μs\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t5.803μs\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: NeuralNetTorch ... Training model for up to 11.46s of the 11.46s of remaining time.\n","\t0.85\t = Validation score   (accuracy)\n","\t6.47s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","\t8.104μs\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t8.104μs\t = Validation runtime (1 row | 10000 batch size)\n","\t8.104μs\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t8.104μs\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Fitting model: LightGBMLarge ... Training model for up to 4.96s of the 4.96s of remaining time.\n","\t0.815\t = Validation score   (accuracy)\n","\t1.29s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","\t0.028ms\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t0.028ms\t = Validation runtime (1 row | 10000 batch size)\n","\t0.028ms\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t0.028ms\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","Removing 9/13 base models to satisfy inference constraint (constraint=0.045ms) ...\n","\t0.288ms\t-> 0.232ms\t(RandomForestGini)\n","\t0.232ms\t-> 0.17ms\t(RandomForestEntr)\n","\t0.17ms\t-> 0.166ms\t(KNeighborsDist)\n","\t0.166ms\t-> 0.162ms\t(KNeighborsUnif)\n","\t0.162ms\t-> 0.128ms\t(ExtraTreesGini)\n","\t0.128ms\t-> 0.1ms\t(LightGBMLarge)\n","\t0.1ms\t-> 0.067ms\t(ExtraTreesEntr)\n","\t0.067ms\t-> 0.061ms\t(LightGBM)\n","\t0.061ms\t-> 0.025ms\t(NeuralNetFastAI)\n","Fitting model: WeightedEnsemble_L2 ... Training model for up to 29.72s of the 3.51s of remaining time.\n","\tEnsemble Weights: {'CatBoost': 1.0}\n","\t0.86\t = Validation score   (accuracy)\n","\t0.07s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n","\t0.068μs\t = Validation runtime (1 row | 10000 batch size | MARGINAL)\n","\t2.534μs\t = Validation runtime (1 row | 10000 batch size)\n","\t0.068μs\t = Validation runtime (1 row | 10000 batch size | REFIT | MARGINAL)\n","\t2.534μs\t = Validation runtime (1 row | 10000 batch size | REFIT)\n","AutoGluon training complete, total runtime = 26.62s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 26542.9 rows/s (200 batch size)\n","TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels/ag-20240917_052405\")\n","Persisting 2 models in memory. Models will require 0.0% of memory.\n"]},{"output_type":"execute_result","data":{"text/plain":["                  model  score_val eval_metric  pred_time_val  fit_time  \\\n","0              CatBoost      0.860    accuracy       0.006298  5.452332   \n","1   WeightedEnsemble_L2      0.860    accuracy       0.007535  5.526511   \n","2            LightGBMXT      0.850    accuracy       0.008317  0.557448   \n","3        NeuralNetTorch      0.850    accuracy       0.014764  6.470239   \n","4               XGBoost      0.845    accuracy       0.011945  0.784607   \n","5              LightGBM      0.840    accuracy       0.016840  0.600590   \n","6       NeuralNetFastAI      0.840    accuracy       0.020826  2.994410   \n","7      RandomForestGini      0.840    accuracy       0.085264  2.146719   \n","8      RandomForestEntr      0.835    accuracy       0.122723  2.119330   \n","9        ExtraTreesEntr      0.820    accuracy       0.101701  1.258210   \n","10        LightGBMLarge      0.815    accuracy       0.011771  1.291840   \n","11       ExtraTreesGini      0.815    accuracy       0.113379  1.260214   \n","12       KNeighborsUnif      0.725    accuracy       0.014671  0.052375   \n","13       KNeighborsDist      0.710    accuracy       0.015037  0.055521   \n","\n","    pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  \\\n","0                 0.006298           5.452332            1       True   \n","1                 0.001237           0.074178            2       True   \n","2                 0.008317           0.557448            1       True   \n","3                 0.014764           6.470239            1       True   \n","4                 0.011945           0.784607            1       True   \n","5                 0.016840           0.600590            1       True   \n","6                 0.020826           2.994410            1       True   \n","7                 0.085264           2.146719            1       True   \n","8                 0.122723           2.119330            1       True   \n","9                 0.101701           1.258210            1       True   \n","10                0.011771           1.291840            1       True   \n","11                0.113379           1.260214            1       True   \n","12                0.014671           0.052375            1       True   \n","13                0.015037           0.055521            1       True   \n","\n","    fit_order  \n","0           7  \n","1          14  \n","2           3  \n","3          12  \n","4          11  \n","5           4  \n","6          10  \n","7           5  \n","8           6  \n","9           9  \n","10         13  \n","11          8  \n","12          1  \n","13          2  "],"text/html":["\n","  <div id=\"df-0f65014a-d482-4f27-8b52-d62c57937472\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_val</th>\n","      <th>eval_metric</th>\n","      <th>pred_time_val</th>\n","      <th>fit_time</th>\n","      <th>pred_time_val_marginal</th>\n","      <th>fit_time_marginal</th>\n","      <th>stack_level</th>\n","      <th>can_infer</th>\n","      <th>fit_order</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CatBoost</td>\n","      <td>0.860</td>\n","      <td>accuracy</td>\n","      <td>0.006298</td>\n","      <td>5.452332</td>\n","      <td>0.006298</td>\n","      <td>5.452332</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WeightedEnsemble_L2</td>\n","      <td>0.860</td>\n","      <td>accuracy</td>\n","      <td>0.007535</td>\n","      <td>5.526511</td>\n","      <td>0.001237</td>\n","      <td>0.074178</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>LightGBMXT</td>\n","      <td>0.850</td>\n","      <td>accuracy</td>\n","      <td>0.008317</td>\n","      <td>0.557448</td>\n","      <td>0.008317</td>\n","      <td>0.557448</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>NeuralNetTorch</td>\n","      <td>0.850</td>\n","      <td>accuracy</td>\n","      <td>0.014764</td>\n","      <td>6.470239</td>\n","      <td>0.014764</td>\n","      <td>6.470239</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>XGBoost</td>\n","      <td>0.845</td>\n","      <td>accuracy</td>\n","      <td>0.011945</td>\n","      <td>0.784607</td>\n","      <td>0.011945</td>\n","      <td>0.784607</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>LightGBM</td>\n","      <td>0.840</td>\n","      <td>accuracy</td>\n","      <td>0.016840</td>\n","      <td>0.600590</td>\n","      <td>0.016840</td>\n","      <td>0.600590</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>NeuralNetFastAI</td>\n","      <td>0.840</td>\n","      <td>accuracy</td>\n","      <td>0.020826</td>\n","      <td>2.994410</td>\n","      <td>0.020826</td>\n","      <td>2.994410</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>RandomForestGini</td>\n","      <td>0.840</td>\n","      <td>accuracy</td>\n","      <td>0.085264</td>\n","      <td>2.146719</td>\n","      <td>0.085264</td>\n","      <td>2.146719</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>RandomForestEntr</td>\n","      <td>0.835</td>\n","      <td>accuracy</td>\n","      <td>0.122723</td>\n","      <td>2.119330</td>\n","      <td>0.122723</td>\n","      <td>2.119330</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>ExtraTreesEntr</td>\n","      <td>0.820</td>\n","      <td>accuracy</td>\n","      <td>0.101701</td>\n","      <td>1.258210</td>\n","      <td>0.101701</td>\n","      <td>1.258210</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>LightGBMLarge</td>\n","      <td>0.815</td>\n","      <td>accuracy</td>\n","      <td>0.011771</td>\n","      <td>1.291840</td>\n","      <td>0.011771</td>\n","      <td>1.291840</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>ExtraTreesGini</td>\n","      <td>0.815</td>\n","      <td>accuracy</td>\n","      <td>0.113379</td>\n","      <td>1.260214</td>\n","      <td>0.113379</td>\n","      <td>1.260214</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>KNeighborsUnif</td>\n","      <td>0.725</td>\n","      <td>accuracy</td>\n","      <td>0.014671</td>\n","      <td>0.052375</td>\n","      <td>0.014671</td>\n","      <td>0.052375</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>KNeighborsDist</td>\n","      <td>0.710</td>\n","      <td>accuracy</td>\n","      <td>0.015037</td>\n","      <td>0.055521</td>\n","      <td>0.015037</td>\n","      <td>0.055521</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f65014a-d482-4f27-8b52-d62c57937472')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0f65014a-d482-4f27-8b52-d62c57937472 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0f65014a-d482-4f27-8b52-d62c57937472');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ed032cfe-8bec-459d-8dbb-bdc9debfa61c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed032cfe-8bec-459d-8dbb-bdc9debfa61c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ed032cfe-8bec-459d-8dbb-bdc9debfa61c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"predictor_infer_limit\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"ExtraTreesEntr\",\n          \"ExtraTreesGini\",\n          \"CatBoost\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04655877769250156,\n        \"min\": 0.71,\n        \"max\": 0.86,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.725,\n          0.85,\n          0.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"eval_metric\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"accuracy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.044428907693693544,\n        \"min\": 0.0062978267669677734,\n        \"max\": 0.12272310256958008,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.10170149803161621\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.140819048908007,\n        \"min\": 0.052375078201293945,\n        \"max\": 6.47023868560791,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1.2582104206085205\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04480622897129424,\n        \"min\": 0.0012371540069580078,\n        \"max\": 0.12272310256958008,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.10170149803161621\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9754555560155553,\n        \"min\": 0.052375078201293945,\n        \"max\": 6.47023868560791,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1.2582104206085205\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stack_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"can_infer\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_order\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["test_data_batch = test_data.sample(infer_limit_batch_size, replace=True, ignore_index=True)\n","\n","import time\n","time_start = time.time()\n","predictor_infer_limit.predict(test_data_batch)\n","time_end = time.time()\n","\n","infer_time_per_row = (time_end - time_start) / len(test_data_batch)\n","rows_per_second = 1 / infer_time_per_row\n","infer_time_per_row_ratio = infer_time_per_row / infer_limit\n","is_constraint_satisfied = infer_time_per_row_ratio <= 1\n","\n","print(f'Model is able to predict {round(rows_per_second, 1)} rows per second. (User-specified Throughput = {1 / infer_limit})')\n","print(f'Model uses {round(infer_time_per_row_ratio * 100, 1)}% of infer_limit time per row.')\n","print(f'Model satisfies inference constraint: {is_constraint_satisfied}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ooy87o2vWccW","executionInfo":{"status":"ok","timestamp":1726550679810,"user_tz":420,"elapsed":243,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"e1a35bef-eb31-48ff-9ad9-a02713e66716"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model is able to predict 197031.3 rows per second. (User-specified Throughput = 20000.0)\n","Model uses 10.2% of infer_limit time per row.\n","Model satisfies inference constraint: True\n"]}]},{"cell_type":"code","source":["additional_ensembles = predictor.fit_weighted_ensemble(expand_pareto_frontier=True)\n","print(\"Alternative ensembles you can use for prediction:\", additional_ensembles)\n","\n","predictor.leaderboard(only_pareto_frontier=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":182},"id":"ghu8V8caWeVq","executionInfo":{"status":"ok","timestamp":1726550682475,"user_tz":420,"elapsed":309,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"787c0b23-0e0c-4df7-8aa1-631d3a4bd55d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Fitting model: WeightedEnsemble_L2Best ...\n","\tEnsemble Weights: {'LightGBM_BAG_L1': 1.0}\n","\t0.6856\t = Validation score   (f1)\n","\t0.01s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n"]},{"output_type":"stream","name":"stdout","text":["Alternative ensembles you can use for prediction: ['WeightedEnsemble_L2Best']\n"]},{"output_type":"execute_result","data":{"text/plain":["             model  score_val eval_metric  pred_time_val   fit_time  \\\n","0  LightGBM_BAG_L1    0.68559          f1        0.11813  31.397663   \n","\n","   pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  \\\n","0                 0.11813          31.397663            1       True   \n","\n","   fit_order  \n","0          1  "],"text/html":["\n","  <div id=\"df-ade82129-8dc9-4e4a-bbc6-882b3c8282b6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_val</th>\n","      <th>eval_metric</th>\n","      <th>pred_time_val</th>\n","      <th>fit_time</th>\n","      <th>pred_time_val_marginal</th>\n","      <th>fit_time_marginal</th>\n","      <th>stack_level</th>\n","      <th>can_infer</th>\n","      <th>fit_order</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LightGBM_BAG_L1</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>0.11813</td>\n","      <td>31.397663</td>\n","      <td>0.11813</td>\n","      <td>31.397663</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ade82129-8dc9-4e4a-bbc6-882b3c8282b6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ade82129-8dc9-4e4a-bbc6-882b3c8282b6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ade82129-8dc9-4e4a-bbc6-882b3c8282b6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"predictor\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"LightGBM_BAG_L1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.685589519650655,\n        \"max\": 0.685589519650655,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.685589519650655\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"eval_metric\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"f1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.11813044548034668,\n        \"max\": 0.11813044548034668,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.11813044548034668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 31.39766263961792,\n        \"max\": 31.39766263961792,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          31.39766263961792\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.11813044548034668,\n        \"max\": 0.11813044548034668,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.11813044548034668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 31.39766263961792,\n        \"max\": 31.39766263961792,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          31.39766263961792\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stack_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"can_infer\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_order\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["model_for_prediction = additional_ensembles[0]\n","predictions = predictor.predict(test_data, model=model_for_prediction)\n","predictor.delete_models(models_to_delete=additional_ensembles, dry_run=False)  # delete these extra models so they don't affect rest of tutorial"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XuKeE32vWgFG","executionInfo":{"status":"ok","timestamp":1726550686218,"user_tz":420,"elapsed":949,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"2442ad99-d921-42df-a79b-7d3ed9680edf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Deleting model WeightedEnsemble_L2Best. All files under agModels-predictClass/models/WeightedEnsemble_L2Best will be removed.\n"]}]},{"cell_type":"code","source":["refit_model_map = predictor.refit_full()\n","print(\"Name of each refit-full model corresponding to a previous bagged ensemble:\")\n","print(refit_model_map)\n","predictor.leaderboard(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":431},"id":"qY8X5fUQWiP6","executionInfo":{"status":"ok","timestamp":1726550689321,"user_tz":420,"elapsed":1716,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"b177eafc-601f-4849-bf9b-59f85b4cbe03"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Refitting models via `predictor.refit_full` using all of the data (combined train and validation)...\n","\tModels trained in this way will have the suffix \"_FULL\" and have NaN validation score.\n","\tThis process is not bound by time_limit, but should take less time than the original `predictor.fit` call.\n","\tTo learn more, refer to the `.refit_full` method docstring which explains how \"_FULL\" models differ from normal models.\n","Fitting 1 L1 models ...\n","Fitting model: LightGBM_BAG_L1_FULL ...\n","\t0.39s\t = Training   runtime\n","Fitting model: WeightedEnsemble_L2_FULL | Skipping fit via cloning parent ...\n","\tEnsemble Weights: {'LightGBM_BAG_L1': 1.0}\n","\t0.02s\t = Training   runtime\n","Updated best model to \"WeightedEnsemble_L2_FULL\" (Previously \"WeightedEnsemble_L2\"). AutoGluon will default to using \"WeightedEnsemble_L2_FULL\" for predict() and predict_proba().\n","Refit complete, total runtime = 0.49s ... Best model: \"WeightedEnsemble_L2_FULL\"\n"]},{"output_type":"stream","name":"stdout","text":["Name of each refit-full model corresponding to a previous bagged ensemble:\n","{'LightGBM_BAG_L1': 'LightGBM_BAG_L1_FULL', 'WeightedEnsemble_L2': 'WeightedEnsemble_L2_FULL'}\n"]},{"output_type":"execute_result","data":{"text/plain":["                      model  score_test  score_val eval_metric  \\\n","0      LightGBM_BAG_L1_FULL    0.634860        NaN          f1   \n","1  WeightedEnsemble_L2_FULL    0.634860        NaN          f1   \n","2           LightGBM_BAG_L1    0.629437    0.68559          f1   \n","3       WeightedEnsemble_L2    0.629437    0.68559          f1   \n","\n","   pred_time_test  pred_time_val   fit_time  pred_time_test_marginal  \\\n","0        0.102335            NaN   0.393470                 0.102335   \n","1        0.104665            NaN   0.412098                 0.002330   \n","2        0.796262       0.118130  31.397663                 0.796262   \n","3        0.798702       0.122686  31.416290                 0.002440   \n","\n","   pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  \\\n","0                     NaN           0.393470            1       True   \n","1                     NaN           0.018627            2       True   \n","2                0.118130          31.397663            1       True   \n","3                0.004556           0.018627            2       True   \n","\n","   fit_order  \n","0          3  \n","1          4  \n","2          1  \n","3          2  "],"text/html":["\n","  <div id=\"df-0c07b569-4d0b-4f71-a9af-6da738b7bad6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_test</th>\n","      <th>score_val</th>\n","      <th>eval_metric</th>\n","      <th>pred_time_test</th>\n","      <th>pred_time_val</th>\n","      <th>fit_time</th>\n","      <th>pred_time_test_marginal</th>\n","      <th>pred_time_val_marginal</th>\n","      <th>fit_time_marginal</th>\n","      <th>stack_level</th>\n","      <th>can_infer</th>\n","      <th>fit_order</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LightGBM_BAG_L1_FULL</td>\n","      <td>0.634860</td>\n","      <td>NaN</td>\n","      <td>f1</td>\n","      <td>0.102335</td>\n","      <td>NaN</td>\n","      <td>0.393470</td>\n","      <td>0.102335</td>\n","      <td>NaN</td>\n","      <td>0.393470</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WeightedEnsemble_L2_FULL</td>\n","      <td>0.634860</td>\n","      <td>NaN</td>\n","      <td>f1</td>\n","      <td>0.104665</td>\n","      <td>NaN</td>\n","      <td>0.412098</td>\n","      <td>0.002330</td>\n","      <td>NaN</td>\n","      <td>0.018627</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>LightGBM_BAG_L1</td>\n","      <td>0.629437</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>0.796262</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>0.796262</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>WeightedEnsemble_L2</td>\n","      <td>0.629437</td>\n","      <td>0.68559</td>\n","      <td>f1</td>\n","      <td>0.798702</td>\n","      <td>0.122686</td>\n","      <td>31.416290</td>\n","      <td>0.002440</td>\n","      <td>0.004556</td>\n","      <td>0.018627</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c07b569-4d0b-4f71-a9af-6da738b7bad6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0c07b569-4d0b-4f71-a9af-6da738b7bad6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0c07b569-4d0b-4f71-a9af-6da738b7bad6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-432f31e4-e902-4451-b030-1e3b5035915a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-432f31e4-e902-4451-b030-1e3b5035915a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-432f31e4-e902-4451-b030-1e3b5035915a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"predictor\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"WeightedEnsemble_L2_FULL\",\n          \"WeightedEnsemble_L2\",\n          \"LightGBM_BAG_L1_FULL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0031310635231461188,\n        \"min\": 0.6294365847604865,\n        \"max\": 0.6348597458643012,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.6294365847604865,\n          0.6348597458643012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.685589519650655,\n        \"max\": 0.685589519650655,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.685589519650655\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"eval_metric\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"f1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4006727210006795,\n        \"min\": 0.10233521461486816,\n        \"max\": 0.7987017631530762,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.10466527938842773\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0032213679253846527,\n        \"min\": 0.11813044548034668,\n        \"max\": 0.12268614768981934,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.12268614768981934\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.900282031282135,\n        \"min\": 0.39347028732299805,\n        \"max\": 31.416290044784546,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.412097692489624\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.38318765247120157,\n        \"min\": 0.0023300647735595703,\n        \"max\": 0.7962615489959717,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0023300647735595703\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08030947113835622,\n        \"min\": 0.004555702209472656,\n        \"max\": 0.11813044548034668,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.004555702209472656\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.628042803138053,\n        \"min\": 0.018627405166625977,\n        \"max\": 31.39766263961792,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.39347028732299805\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stack_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"can_infer\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_order\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["student_models = predictor.distill(time_limit=30)  # specify much longer time limit in real applications\n","print(student_models)\n","preds_student = predictor.predict(test_data_nolabel, model=student_models[0])\n","print(f\"predictions from {student_models[0]}:\", list(preds_student)[:5])\n","predictor.leaderboard(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"sWyVD1NpWkDS","executionInfo":{"status":"ok","timestamp":1726550718837,"user_tz":420,"elapsed":26930,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"6f3e5141-4840-4f28-9860-f7cbc51a13f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Distilling with teacher='WeightedEnsemble_L2_FULL', teacher_preds=soft, augment_method=spunge ...\n","SPUNGE: Augmenting training data with 4000 synthetic samples for distillation...\n","Distilling with each of these student models: ['LightGBM_DSTL', 'CatBoost_DSTL', 'RandomForestMSE_DSTL', 'NeuralNetTorch_DSTL']\n","Fitting 4 L1 models ...\n","Fitting model: LightGBM_DSTL ... Training model for up to 30.0s of the 29.99s of remaining time.\n","\tWarning: Exception caused LightGBM_DSTL to fail during training... Skipping this model.\n","\t\tpandas dtypes must be int, float or bool.\n","Fields with bad pandas dtypes: workclass: object, education: object, marital-status: object, occupation: object, relationship: object, race: object, native-country: object\n","Detailed Traceback:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/core/trainer/abstract_trainer.py\", line 1904, in _train_and_save\n","    model = self._train_single(X, y, model, X_val, y_val, total_resources=total_resources, **model_fit_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/core/trainer/abstract_trainer.py\", line 1844, in _train_single\n","    model = model.fit(X=X, y=y, X_val=X_val, y_val=y_val, total_resources=total_resources, **model_fit_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/core/models/abstract/abstract_model.py\", line 856, in fit\n","    out = self._fit(**kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/tabular/models/lgb/lgb_model.py\", line 218, in _fit\n","    self.model = train_lgb_model(early_stopping_callback_kwargs=early_stopping_callback_kwargs, **train_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/tabular/models/lgb/lgb_utils.py\", line 128, in train_lgb_model\n","    return lgb.train(**train_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/lightgbm/engine.py\", line 255, in train\n","    booster = Booster(params=params, train_set=train_set)\n","  File \"/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\", line 3433, in __init__\n","    train_set.construct()\n","  File \"/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\", line 2462, in construct\n","    self._lazy_init(data=self.data, label=self.label, reference=None,\n","  File \"/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\", line 2022, in _lazy_init\n","    data, feature_name, categorical_feature, self.pandas_categorical = _data_from_pandas(\n","  File \"/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\", line 825, in _data_from_pandas\n","    _pandas_to_numpy(data, target_dtype=target_dtype),\n","  File \"/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\", line 771, in _pandas_to_numpy\n","    _check_for_bad_pandas_dtypes(data.dtypes)\n","  File \"/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\", line 763, in _check_for_bad_pandas_dtypes\n","    raise ValueError('pandas dtypes must be int, float or bool.\\n'\n","ValueError: pandas dtypes must be int, float or bool.\n","Fields with bad pandas dtypes: workclass: object, education: object, marital-status: object, occupation: object, relationship: object, race: object, native-country: object\n","Fitting model: CatBoost_DSTL ... Training model for up to 29.07s of the 29.06s of remaining time.\n","\tWarning: Exception caused CatBoost_DSTL to fail during training... Skipping this model.\n","\t\tfeatures data: pandas.DataFrame column 'workclass' has dtype 'category' but is not in  cat_features list\n","Detailed Traceback:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/core/trainer/abstract_trainer.py\", line 1904, in _train_and_save\n","    model = self._train_single(X, y, model, X_val, y_val, total_resources=total_resources, **model_fit_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/core/trainer/abstract_trainer.py\", line 1844, in _train_single\n","    model = model.fit(X=X, y=y, X_val=X_val, y_val=y_val, total_resources=total_resources, **model_fit_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/core/models/abstract/abstract_model.py\", line 856, in fit\n","    out = self._fit(**kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/tabular/models/catboost/catboost_model.py\", line 125, in _fit\n","    X_val = Pool(data=X_val, label=y_val, cat_features=cat_features, weight=sample_weight_val)\n","  File \"/usr/local/lib/python3.10/dist-packages/catboost/core.py\", line 855, in __init__\n","    self._init(data, label, cat_features, text_features, embedding_features, embedding_features_data, pairs, graph, weight,\n","  File \"/usr/local/lib/python3.10/dist-packages/catboost/core.py\", line 1491, in _init\n","    self._init_pool(data, label, cat_features, text_features, embedding_features, embedding_features_data, pairs, graph, weight,\n","  File \"_catboost.pyx\", line 4339, in _catboost._PoolBase._init_pool\n","  File \"_catboost.pyx\", line 4391, in _catboost._PoolBase._init_pool\n","  File \"_catboost.pyx\", line 4200, in _catboost._PoolBase._init_features_order_layout_pool\n","  File \"_catboost.pyx\", line 3083, in _catboost._set_features_order_data_pd_data_frame\n","_catboost.CatBoostError: features data: pandas.DataFrame column 'workclass' has dtype 'category' but is not in  cat_features list\n","Fitting model: RandomForestMSE_DSTL ... Training model for up to 28.6s of the 28.59s of remaining time.\n","\tNote: model has different eval_metric than default.\n","\t-0.1079\t = Validation score   (-mean_squared_error)\n","\t7.28s\t = Training   runtime\n","\t0.1s\t = Validation runtime\n","Fitting model: NeuralNetTorch_DSTL ... Training model for up to 20.71s of the 20.7s of remaining time.\n","\tWarning: Exception caused NeuralNetTorch_DSTL to fail during training... Skipping this model.\n","\t\tFound array with 0 feature(s) (shape=(4800, 0)) while a minimum of 1 is required.\n","Detailed Traceback:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/core/trainer/abstract_trainer.py\", line 1904, in _train_and_save\n","    model = self._train_single(X, y, model, X_val, y_val, total_resources=total_resources, **model_fit_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/core/trainer/abstract_trainer.py\", line 1844, in _train_single\n","    model = model.fit(X=X, y=y, X_val=X_val, y_val=y_val, total_resources=total_resources, **model_fit_kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/core/models/abstract/abstract_model.py\", line 856, in fit\n","    out = self._fit(**kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/tabular/models/tabular_nn/torch/tabular_nn_torch.py\", line 185, in _fit\n","    train_dataset, val_dataset = self._generate_datasets(X=X, y=y, params=processor_kwargs, X_val=X_val, y_val=y_val)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/tabular/models/tabular_nn/torch/tabular_nn_torch.py\", line 465, in _generate_datasets\n","    train_dataset = self._process_train_data(\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/tabular/models/tabular_nn/torch/tabular_nn_torch.py\", line 538, in _process_train_data\n","    df = self.processor.fit_transform(df)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n","    data_to_wrap = f(self, X, *args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1152, in wrapper\n","    return fit_method(estimator, *args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/compose/_column_transformer.py\", line 754, in fit_transform\n","    result = self._fit_transform(X, y, _fit_transform_one)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/compose/_column_transformer.py\", line 681, in _fit_transform\n","    return Parallel(n_jobs=self.n_jobs)(\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 65, in __call__\n","    return super().__call__(iterable_with_config)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1918, in __call__\n","    return output if self.return_generator else list(output)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1847, in _get_sequential_output\n","    res = func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 127, in __call__\n","    return self.function(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/pipeline.py\", line 957, in _fit_transform_one\n","    res = transformer.fit_transform(X, y, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1152, in wrapper\n","    return fit_method(estimator, *args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/pipeline.py\", line 479, in fit_transform\n","    return last_step.fit_transform(Xt, y, **fit_params_last_step)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/_set_output.py\", line 157, in wrapped\n","    data_to_wrap = f(self, X, *args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 916, in fit_transform\n","    return self.fit(X, **fit_params).transform(X)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/tabular/models/tabular_nn/utils/categorical_encoders.py\", line 727, in fit\n","    self._fit(X, handle_unknown=\"ignore\")\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/tabular/models/tabular_nn/utils/categorical_encoders.py\", line 193, in _fit\n","    X_list, n_samples, n_features = self._check_X(X)\n","  File \"/usr/local/lib/python3.10/dist-packages/autogluon/tabular/models/tabular_nn/utils/categorical_encoders.py\", line 164, in _check_X\n","    X_temp = check_array(X, dtype=None, force_all_finite=False)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\", line 976, in check_array\n","    raise ValueError(\n","ValueError: Found array with 0 feature(s) (shape=(4800, 0)) while a minimum of 1 is required.\n","Repeating k-fold bagging: 2/5\n","Repeating k-fold bagging: 3/5\n","Repeating k-fold bagging: 4/5\n","Repeating k-fold bagging: 5/5\n","Completed 5/5 k-fold bagging repeats ...\n","Distilling with each of these student models: ['WeightedEnsemble_L2_DSTL']\n","Fitting model: WeightedEnsemble_L2_DSTL ... Training model for up to 30.0s of the 20.26s of remaining time.\n","\tEnsemble Weights: {'RandomForestMSE_DSTL': 1.0}\n","\tNote: model has different eval_metric than default.\n","\t-0.1079\t = Validation score   (-mean_squared_error)\n","\t0.01s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n","Distilled model leaderboard:\n","                      model  score_val         eval_metric  pred_time_val  fit_time  pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  fit_order\n","0      RandomForestMSE_DSTL   0.629213  mean_squared_error       0.097655  7.275973                0.097655           7.275973            1       True          5\n","1  WeightedEnsemble_L2_DSTL   0.629213  mean_squared_error       0.098558  7.281041                0.000903           0.005068            2       True          6\n"]},{"output_type":"stream","name":"stdout","text":["['RandomForestMSE_DSTL', 'WeightedEnsemble_L2_DSTL']\n","predictions from RandomForestMSE_DSTL: [' <=50K', ' <=50K', ' >50K', ' <=50K', ' <=50K']\n"]},{"output_type":"execute_result","data":{"text/plain":["                      model  score_test  score_val         eval_metric  \\\n","0      LightGBM_BAG_L1_FULL    0.634860        NaN                  f1   \n","1  WeightedEnsemble_L2_FULL    0.634860        NaN                  f1   \n","2           LightGBM_BAG_L1    0.629437   0.685590                  f1   \n","3       WeightedEnsemble_L2    0.629437   0.685590                  f1   \n","4      RandomForestMSE_DSTL    0.607631   0.629213  mean_squared_error   \n","5  WeightedEnsemble_L2_DSTL    0.607631   0.629213  mean_squared_error   \n","\n","   pred_time_test  pred_time_val   fit_time  pred_time_test_marginal  \\\n","0        0.110901            NaN   0.393470                 0.110901   \n","1        0.113317            NaN   0.412098                 0.002416   \n","2        0.787676       0.118130  31.397663                 0.787676   \n","3        0.790096       0.122686  31.416290                 0.002419   \n","4        0.631596       0.097655   7.275973                 0.631596   \n","5        0.636152       0.098558   7.281041                 0.004556   \n","\n","   pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  \\\n","0                     NaN           0.393470            1       True   \n","1                     NaN           0.018627            2       True   \n","2                0.118130          31.397663            1       True   \n","3                0.004556           0.018627            2       True   \n","4                0.097655           7.275973            1       True   \n","5                0.000903           0.005068            2       True   \n","\n","   fit_order  \n","0          3  \n","1          4  \n","2          1  \n","3          2  \n","4          5  \n","5          6  "],"text/html":["\n","  <div id=\"df-840a75e0-cce9-452f-b8a5-3a66821cc717\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_test</th>\n","      <th>score_val</th>\n","      <th>eval_metric</th>\n","      <th>pred_time_test</th>\n","      <th>pred_time_val</th>\n","      <th>fit_time</th>\n","      <th>pred_time_test_marginal</th>\n","      <th>pred_time_val_marginal</th>\n","      <th>fit_time_marginal</th>\n","      <th>stack_level</th>\n","      <th>can_infer</th>\n","      <th>fit_order</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LightGBM_BAG_L1_FULL</td>\n","      <td>0.634860</td>\n","      <td>NaN</td>\n","      <td>f1</td>\n","      <td>0.110901</td>\n","      <td>NaN</td>\n","      <td>0.393470</td>\n","      <td>0.110901</td>\n","      <td>NaN</td>\n","      <td>0.393470</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WeightedEnsemble_L2_FULL</td>\n","      <td>0.634860</td>\n","      <td>NaN</td>\n","      <td>f1</td>\n","      <td>0.113317</td>\n","      <td>NaN</td>\n","      <td>0.412098</td>\n","      <td>0.002416</td>\n","      <td>NaN</td>\n","      <td>0.018627</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>LightGBM_BAG_L1</td>\n","      <td>0.629437</td>\n","      <td>0.685590</td>\n","      <td>f1</td>\n","      <td>0.787676</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>0.787676</td>\n","      <td>0.118130</td>\n","      <td>31.397663</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>WeightedEnsemble_L2</td>\n","      <td>0.629437</td>\n","      <td>0.685590</td>\n","      <td>f1</td>\n","      <td>0.790096</td>\n","      <td>0.122686</td>\n","      <td>31.416290</td>\n","      <td>0.002419</td>\n","      <td>0.004556</td>\n","      <td>0.018627</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>RandomForestMSE_DSTL</td>\n","      <td>0.607631</td>\n","      <td>0.629213</td>\n","      <td>mean_squared_error</td>\n","      <td>0.631596</td>\n","      <td>0.097655</td>\n","      <td>7.275973</td>\n","      <td>0.631596</td>\n","      <td>0.097655</td>\n","      <td>7.275973</td>\n","      <td>1</td>\n","      <td>True</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>WeightedEnsemble_L2_DSTL</td>\n","      <td>0.607631</td>\n","      <td>0.629213</td>\n","      <td>mean_squared_error</td>\n","      <td>0.636152</td>\n","      <td>0.098558</td>\n","      <td>7.281041</td>\n","      <td>0.004556</td>\n","      <td>0.000903</td>\n","      <td>0.005068</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-840a75e0-cce9-452f-b8a5-3a66821cc717')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-840a75e0-cce9-452f-b8a5-3a66821cc717 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-840a75e0-cce9-452f-b8a5-3a66821cc717');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8235d4b7-9d2f-47e1-b9d9-b6789c9b9034\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8235d4b7-9d2f-47e1-b9d9-b6789c9b9034')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8235d4b7-9d2f-47e1-b9d9-b6789c9b9034 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"predictor\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"LightGBM_BAG_L1_FULL\",\n          \"WeightedEnsemble_L2_FULL\",\n          \"WeightedEnsemble_L2_DSTL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.012890619887352676,\n        \"min\": 0.6076313894888409,\n        \"max\": 0.6348597458643012,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.6348597458643012,\n          0.6294365847604865,\n          0.6076313894888409\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03254871985176773,\n        \"min\": 0.6292134831460675,\n        \"max\": 0.685589519650655,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.6292134831460675,\n          0.685589519650655\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"eval_metric\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"mean_squared_error\",\n          \"f1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.31713694129974557,\n        \"min\": 0.1109011173248291,\n        \"max\": 0.7900958061218262,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.1109011173248291,\n          0.11331701278686523\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013014660434455032,\n        \"min\": 0.0976552963256836,\n        \"max\": 0.12268614768981934,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.12268614768981934,\n          0.09855818748474121\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.563511842714249,\n        \"min\": 0.39347028732299805,\n        \"max\": 31.416290044784546,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.39347028732299805,\n          0.412097692489624\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_test_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.35682923430783536,\n        \"min\": 0.002415895462036133,\n        \"max\": 0.7876763343811035,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.1109011173248291,\n          0.002415895462036133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_time_val_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06130705430644559,\n        \"min\": 0.0009028911590576172,\n        \"max\": 0.11813044548034668,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.004555702209472656,\n          0.0009028911590576172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_time_marginal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.521852664635073,\n        \"min\": 0.005068063735961914,\n        \"max\": 31.39766263961792,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.018627405166625977,\n          0.005068063735961914\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stack_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"can_infer\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fit_order\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["presets = ['good_quality', 'optimize_for_deployment']\n","predictor_light = TabularPredictor(label=label, eval_metric=metric).fit(train_data, presets=presets, time_limit=360)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V1rIpHZcWl0i","executionInfo":{"status":"ok","timestamp":1726551209832,"user_tz":420,"elapsed":363040,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"bb6414f6-644a-4ba3-80c6-11ecff58f670"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["No path specified. Models will be saved in: \"AutogluonModels/ag-20240917_052726\"\n","Verbosity: 2 (Standard Logging)\n","=================== System Info ===================\n","AutoGluon Version:  1.1.1\n","Python Version:     3.10.12\n","Operating System:   Linux\n","Platform Machine:   x86_64\n","Platform Version:   #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024\n","CPU Count:          2\n","Memory Avail:       9.97 GB / 12.67 GB (78.7%)\n","Disk Space Avail:   65.79 GB / 107.72 GB (61.1%)\n","===================================================\n","Presets specified: ['good_quality', 'optimize_for_deployment']\n","Setting dynamic_stacking from 'auto' to True. Reason: Enable dynamic_stacking when use_bag_holdout is disabled. (use_bag_holdout=False)\n","Stack configuration (auto_stack=True): num_stack_levels=1, num_bag_folds=8, num_bag_sets=1\n","Note: `save_bag_folds=False`! This will greatly reduce peak disk usage during fit (by ~8x), but runs the risk of an out-of-memory error during model refit if memory is small relative to the data size.\n","\tYou can avoid this risk by setting `save_bag_folds=True`.\n","DyStack is enabled (dynamic_stacking=True). AutoGluon will try to determine whether the input data is affected by stacked overfitting and enable or disable stacking as a consequence.\n","\tThis is used to identify the optimal `num_stack_levels` value. Copies of AutoGluon will be fit on subsets of the data. Then holdout validation data is used to detect stacked overfitting.\n","\tRunning DyStack for up to 90s of the 360s of remaining time (25%).\n","\t\tContext path: \"AutogluonModels/ag-20240917_052726/ds_sub_fit/sub_fit_ho\"\n","Leaderboard on holdout data (DyStack):\n","                      model  score_holdout  score_val eval_metric  pred_time_test pred_time_val  fit_time  pred_time_test_marginal pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  fit_order\n","0    LightGBMXT_BAG_L1_FULL       0.866071   0.862613    accuracy        0.011136          None  1.957550                 0.011136                   None           1.957550            1       True          1\n","1  WeightedEnsemble_L2_FULL       0.866071   0.862613    accuracy        0.013078          None  1.998622                 0.001943                   None           0.041072            2       True          3\n","2    LightGBMXT_BAG_L2_FULL       0.866071   0.869369    accuracy        0.029904          None  2.386805                 0.008167                   None           0.199151            2       True          4\n","3  WeightedEnsemble_L3_FULL       0.866071   0.869369    accuracy        0.031597          None  2.466041                 0.001693                   None           0.079236            3       True          5\n","4      LightGBM_BAG_L1_FULL       0.839286   0.861486    accuracy        0.010601          None  0.230105                 0.010601                   None           0.230105            1       True          2\n","\t0\t = Optimal   num_stack_levels (Stacked Overfitting Occurred: True)\n","\t113s\t = DyStack   runtime |\t247s\t = Remaining runtime\n","Starting main fit with num_stack_levels=0.\n","\tFor future fit calls on this dataset, you can skip DyStack to save time: `predictor.fit(..., dynamic_stacking=False, num_stack_levels=0)`\n","Beginning AutoGluon training ... Time limit = 247s\n","AutoGluon will save models to \"AutogluonModels/ag-20240917_052726\"\n","Train Data Rows:    1000\n","Train Data Columns: 14\n","Label Column:       class\n","Problem Type:       binary\n","Preprocessing data ...\n","Selected class <--> label mapping:  class 1 =  >50K, class 0 =  <=50K\n","\tNote: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive ( >50K) vs negative ( <=50K) class.\n","\tTo explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n","Using Feature Generators to preprocess the data ...\n","Fitting AutoMLPipelineFeatureGenerator...\n","\tAvailable Memory:                    9893.38 MB\n","\tTrain Data (Original)  Memory Usage: 0.56 MB (0.0% of available memory)\n","\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n","\tStage 1 Generators:\n","\t\tFitting AsTypeFeatureGenerator...\n","\t\t\tNote: Converting 1 features to boolean dtype as they only contain 2 unique values.\n","\tStage 2 Generators:\n","\t\tFitting FillNaFeatureGenerator...\n","\tStage 3 Generators:\n","\t\tFitting IdentityFeatureGenerator...\n","\t\tFitting CategoryFeatureGenerator...\n","\t\t\tFitting CategoryMemoryMinimizeFeatureGenerator...\n","\tStage 4 Generators:\n","\t\tFitting DropUniqueFeatureGenerator...\n","\tStage 5 Generators:\n","\t\tFitting DropDuplicatesFeatureGenerator...\n","\tTypes of features in original data (raw dtype, special dtypes):\n","\t\t('int', [])    : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('object', []) : 8 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\tTypes of features in processed data (raw dtype, special dtypes):\n","\t\t('category', [])  : 7 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\t\t('int', [])       : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('int', ['bool']) : 1 | ['sex']\n","\t0.3s = Fit runtime\n","\t14 features in original data used to generate 14 features in processed data.\n","\tTrain Data (Processed) Memory Usage: 0.06 MB (0.0% of available memory)\n","Data preprocessing and feature engineering runtime = 0.39s ...\n","AutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n","\tTo change this, specify the eval_metric parameter of Predictor()\n","User-specified model hyperparameters to be fit:\n","{\n","\t'NN_TORCH': {},\n","\t'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, 'GBMLarge'],\n","\t'CAT': {},\n","\t'XGB': {},\n","\t'FASTAI': {},\n","\t'RF': [{'criterion': 'gini', 'max_depth': 15, 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'max_depth': 15, 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'max_depth': 15, 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n","\t'XT': [{'criterion': 'gini', 'max_depth': 15, 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'max_depth': 15, 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'max_depth': 15, 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n","}\n","Fitting 11 L1 models ...\n","Fitting model: LightGBMXT_BAG_L1 ... Training model for up to 246.69s of the 246.68s of remaining time.\n","\tFitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.03%)\n","\t0.859\t = Validation score   (accuracy)\n","\t39.04s\t = Training   runtime\n","\t0.31s\t = Validation runtime\n","Fitting model: LightGBM_BAG_L1 ... Training model for up to 201.66s of the 201.65s of remaining time.\n","\tFitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.03%)\n","\t0.859\t = Validation score   (accuracy)\n","\t29.75s\t = Training   runtime\n","\t0.12s\t = Validation runtime\n","Fitting model: RandomForestGini_BAG_L1 ... Training model for up to 166.77s of the 166.76s of remaining time.\n","\t0.835\t = Validation score   (accuracy)\n","\t1.33s\t = Training   runtime\n","\t0.26s\t = Validation runtime\n","Fitting model: RandomForestEntr_BAG_L1 ... Training model for up to 165.11s of the 165.1s of remaining time.\n","\t0.835\t = Validation score   (accuracy)\n","\t1.08s\t = Training   runtime\n","\t0.16s\t = Validation runtime\n","Fitting model: CatBoost_BAG_L1 ... Training model for up to 163.81s of the 163.8s of remaining time.\n","\tFitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.06%)\n","\t0.855\t = Validation score   (accuracy)\n","\t40.94s\t = Training   runtime\n","\t0.09s\t = Validation runtime\n","Fitting model: ExtraTreesGini_BAG_L1 ... Training model for up to 117.38s of the 117.37s of remaining time.\n","\t0.831\t = Validation score   (accuracy)\n","\t1.15s\t = Training   runtime\n","\t0.23s\t = Validation runtime\n","Fitting model: ExtraTreesEntr_BAG_L1 ... Training model for up to 115.95s of the 115.94s of remaining time.\n","\t0.828\t = Validation score   (accuracy)\n","\t0.91s\t = Training   runtime\n","\t0.17s\t = Validation runtime\n","Fitting model: NeuralNetFastAI_BAG_L1 ... Training model for up to 114.82s of the 114.81s of remaining time.\n","\tFitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.01%)\n","\t0.857\t = Validation score   (accuracy)\n","\t57.51s\t = Training   runtime\n","\t0.45s\t = Validation runtime\n","Fitting model: XGBoost_BAG_L1 ... Training model for up to 44.21s of the 44.2s of remaining time.\n","\tFitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.06%)\n","\t0.864\t = Validation score   (accuracy)\n","\t24.73s\t = Training   runtime\n","\t0.23s\t = Validation runtime\n","Fitting model: NeuralNetTorch_BAG_L1 ... Training model for up to 10.86s of the 10.85s of remaining time.\n","\tFitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2 workers, per: cpus=1, gpus=0, memory=0.00%)\n","\tTime limit exceeded... Skipping NeuralNetTorch_BAG_L1.\n","2024-09-17 05:33:28,893\tERROR worker.py:406 -- Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): The worker died unexpectedly while executing this task. Check python-core-worker-*.log files for more information.\n","Fitting model: WeightedEnsemble_L2 ... Training model for up to 246.69s of the -2.07s of remaining time.\n","\tEnsemble Weights: {'XGBoost_BAG_L1': 1.0}\n","\t0.864\t = Validation score   (accuracy)\n","\t0.25s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n","AutoGluon training complete, total runtime = 249.46s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 553.8 rows/s (125 batch size)\n","Automatically performing refit_full as a post-fit operation (due to `.fit(..., refit_full=True)`\n","Refitting models via `predictor.refit_full` using all of the data (combined train and validation)...\n","\tModels trained in this way will have the suffix \"_FULL\" and have NaN validation score.\n","\tThis process is not bound by time_limit, but should take less time than the original `predictor.fit` call.\n","\tTo learn more, refer to the `.refit_full` method docstring which explains how \"_FULL\" models differ from normal models.\n","Fitting 1 L1 models ...\n","Fitting model: XGBoost_BAG_L1_FULL ...\n","\t0.13s\t = Training   runtime\n","Updated best model to \"XGBoost_BAG_L1_FULL\" (Previously \"WeightedEnsemble_L2\"). AutoGluon will default to using \"XGBoost_BAG_L1_FULL\" for predict() and predict_proba().\n","Refit complete, total runtime = 0.18s ... Best model: \"XGBoost_BAG_L1_FULL\"\n","Deleting model LightGBMXT_BAG_L1. All files under AutogluonModels/ag-20240917_052726/models/LightGBMXT_BAG_L1 will be removed.\n","Deleting model LightGBM_BAG_L1. All files under AutogluonModels/ag-20240917_052726/models/LightGBM_BAG_L1 will be removed.\n","Deleting model RandomForestGini_BAG_L1. All files under AutogluonModels/ag-20240917_052726/models/RandomForestGini_BAG_L1 will be removed.\n","Deleting model RandomForestEntr_BAG_L1. All files under AutogluonModels/ag-20240917_052726/models/RandomForestEntr_BAG_L1 will be removed.\n","Deleting model CatBoost_BAG_L1. All files under AutogluonModels/ag-20240917_052726/models/CatBoost_BAG_L1 will be removed.\n","Deleting model ExtraTreesGini_BAG_L1. All files under AutogluonModels/ag-20240917_052726/models/ExtraTreesGini_BAG_L1 will be removed.\n","Deleting model ExtraTreesEntr_BAG_L1. All files under AutogluonModels/ag-20240917_052726/models/ExtraTreesEntr_BAG_L1 will be removed.\n","Deleting model NeuralNetFastAI_BAG_L1. All files under AutogluonModels/ag-20240917_052726/models/NeuralNetFastAI_BAG_L1 will be removed.\n","Deleting model XGBoost_BAG_L1. All files under AutogluonModels/ag-20240917_052726/models/XGBoost_BAG_L1 will be removed.\n","Deleting model WeightedEnsemble_L2. All files under AutogluonModels/ag-20240917_052726/models/WeightedEnsemble_L2 will be removed.\n","TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels/ag-20240917_052726\")\n"]}]},{"cell_type":"code","source":["predictor_light = TabularPredictor(label=label, eval_metric=metric).fit(train_data, hyperparameters='very_light', time_limit=30)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oz4QuHE-WndN","executionInfo":{"status":"ok","timestamp":1726551308755,"user_tz":420,"elapsed":15675,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"4b7c0cb1-24d4-44e5-cac4-79de5d8e6fbc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["No path specified. Models will be saved in: \"AutogluonModels/ag-20240917_053453\"\n","Verbosity: 2 (Standard Logging)\n","=================== System Info ===================\n","AutoGluon Version:  1.1.1\n","Python Version:     3.10.12\n","Operating System:   Linux\n","Platform Machine:   x86_64\n","Platform Version:   #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024\n","CPU Count:          2\n","Memory Avail:       9.82 GB / 12.67 GB (77.5%)\n","Disk Space Avail:   65.79 GB / 107.72 GB (61.1%)\n","===================================================\n","No presets specified! To achieve strong results with AutoGluon, it is recommended to use the available presets.\n","\tRecommended Presets (For more details refer to https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets):\n","\tpresets='best_quality'   : Maximize accuracy. Default time_limit=3600.\n","\tpresets='high_quality'   : Strong accuracy with fast inference speed. Default time_limit=3600.\n","\tpresets='good_quality'   : Good accuracy with very fast inference speed. Default time_limit=3600.\n","\tpresets='medium_quality' : Fast training time, ideal for initial prototyping.\n","Beginning AutoGluon training ... Time limit = 30s\n","AutoGluon will save models to \"AutogluonModels/ag-20240917_053453\"\n","Train Data Rows:    1000\n","Train Data Columns: 14\n","Label Column:       class\n","AutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).\n","\t2 unique label values:  [' >50K', ' <=50K']\n","\tIf 'binary' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])\n","Problem Type:       binary\n","Preprocessing data ...\n","Selected class <--> label mapping:  class 1 =  >50K, class 0 =  <=50K\n","\tNote: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive ( >50K) vs negative ( <=50K) class.\n","\tTo explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n","Using Feature Generators to preprocess the data ...\n","Fitting AutoMLPipelineFeatureGenerator...\n","\tAvailable Memory:                    10053.79 MB\n","\tTrain Data (Original)  Memory Usage: 0.56 MB (0.0% of available memory)\n","\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n","\tStage 1 Generators:\n","\t\tFitting AsTypeFeatureGenerator...\n","\t\t\tNote: Converting 1 features to boolean dtype as they only contain 2 unique values.\n","\tStage 2 Generators:\n","\t\tFitting FillNaFeatureGenerator...\n","\tStage 3 Generators:\n","\t\tFitting IdentityFeatureGenerator...\n","\t\tFitting CategoryFeatureGenerator...\n","\t\t\tFitting CategoryMemoryMinimizeFeatureGenerator...\n","\tStage 4 Generators:\n","\t\tFitting DropUniqueFeatureGenerator...\n","\tStage 5 Generators:\n","\t\tFitting DropDuplicatesFeatureGenerator...\n","\tTypes of features in original data (raw dtype, special dtypes):\n","\t\t('int', [])    : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('object', []) : 8 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\tTypes of features in processed data (raw dtype, special dtypes):\n","\t\t('category', [])  : 7 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\t\t('int', [])       : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('int', ['bool']) : 1 | ['sex']\n","\t0.2s = Fit runtime\n","\t14 features in original data used to generate 14 features in processed data.\n","\tTrain Data (Processed) Memory Usage: 0.06 MB (0.0% of available memory)\n","Data preprocessing and feature engineering runtime = 0.25s ...\n","AutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n","\tTo change this, specify the eval_metric parameter of Predictor()\n","Automatically generating train/validation split with holdout_frac=0.2, Train Rows: 800, Val Rows: 200\n","User-specified model hyperparameters to be fit:\n","{\n","\t'NN_TORCH': {},\n","\t'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, 'GBMLarge'],\n","\t'CAT': {},\n","\t'XGB': {},\n","\t'FASTAI': {},\n","}\n","Fitting 7 L1 models ...\n","Fitting model: LightGBMXT ... Training model for up to 29.75s of the 29.75s of remaining time.\n","\t0.85\t = Validation score   (accuracy)\n","\t0.48s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitting model: LightGBM ... Training model for up to 29.24s of the 29.24s of remaining time.\n","\t0.84\t = Validation score   (accuracy)\n","\t0.58s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitting model: CatBoost ... Training model for up to 28.64s of the 28.64s of remaining time.\n","\t0.86\t = Validation score   (accuracy)\n","\t4.71s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitting model: NeuralNetFastAI ... Training model for up to 23.91s of the 23.91s of remaining time.\n","No improvement since epoch 7: early stopping\n","\t0.84\t = Validation score   (accuracy)\n","\t1.57s\t = Training   runtime\n","\t0.02s\t = Validation runtime\n","Fitting model: XGBoost ... Training model for up to 22.3s of the 22.3s of remaining time.\n","\t0.845\t = Validation score   (accuracy)\n","\t0.42s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitting model: NeuralNetTorch ... Training model for up to 21.85s of the 21.85s of remaining time.\n","\t0.85\t = Validation score   (accuracy)\n","\t6.04s\t = Training   runtime\n","\t0.03s\t = Validation runtime\n","Fitting model: LightGBMLarge ... Training model for up to 15.76s of the 15.76s of remaining time.\n","\t0.815\t = Validation score   (accuracy)\n","\t1.08s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitting model: WeightedEnsemble_L2 ... Training model for up to 29.75s of the 14.55s of remaining time.\n","\tEnsemble Weights: {'CatBoost': 1.0}\n","\t0.86\t = Validation score   (accuracy)\n","\t0.1s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n","AutoGluon training complete, total runtime = 15.6s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 26324.6 rows/s (200 batch size)\n","TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels/ag-20240917_053453\")\n"]}]},{"cell_type":"code","source":["excluded_model_types = ['KNN', 'NN_TORCH']\n","predictor_light = TabularPredictor(label=label, eval_metric=metric).fit(train_data, excluded_model_types=excluded_model_types, time_limit=30)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H8iTSauFWpUO","executionInfo":{"status":"ok","timestamp":1726551500235,"user_tz":420,"elapsed":16206,"user":{"displayName":"Apurva Karne","userId":"15669434470397290511"}},"outputId":"44ece90a-e442-4652-82c7-b6934f0a0c16"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["No path specified. Models will be saved in: \"AutogluonModels/ag-20240917_053804\"\n","Verbosity: 2 (Standard Logging)\n","=================== System Info ===================\n","AutoGluon Version:  1.1.1\n","Python Version:     3.10.12\n","Operating System:   Linux\n","Platform Machine:   x86_64\n","Platform Version:   #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024\n","CPU Count:          2\n","Memory Avail:       9.82 GB / 12.67 GB (77.5%)\n","Disk Space Avail:   65.78 GB / 107.72 GB (61.1%)\n","===================================================\n","No presets specified! To achieve strong results with AutoGluon, it is recommended to use the available presets.\n","\tRecommended Presets (For more details refer to https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets):\n","\tpresets='best_quality'   : Maximize accuracy. Default time_limit=3600.\n","\tpresets='high_quality'   : Strong accuracy with fast inference speed. Default time_limit=3600.\n","\tpresets='good_quality'   : Good accuracy with very fast inference speed. Default time_limit=3600.\n","\tpresets='medium_quality' : Fast training time, ideal for initial prototyping.\n","Beginning AutoGluon training ... Time limit = 30s\n","AutoGluon will save models to \"AutogluonModels/ag-20240917_053804\"\n","Train Data Rows:    1000\n","Train Data Columns: 14\n","Label Column:       class\n","AutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).\n","\t2 unique label values:  [' >50K', ' <=50K']\n","\tIf 'binary' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])\n","Problem Type:       binary\n","Preprocessing data ...\n","Selected class <--> label mapping:  class 1 =  >50K, class 0 =  <=50K\n","\tNote: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive ( >50K) vs negative ( <=50K) class.\n","\tTo explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n","Using Feature Generators to preprocess the data ...\n","Fitting AutoMLPipelineFeatureGenerator...\n","\tAvailable Memory:                    10056.74 MB\n","\tTrain Data (Original)  Memory Usage: 0.56 MB (0.0% of available memory)\n","\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n","\tStage 1 Generators:\n","\t\tFitting AsTypeFeatureGenerator...\n","\t\t\tNote: Converting 1 features to boolean dtype as they only contain 2 unique values.\n","\tStage 2 Generators:\n","\t\tFitting FillNaFeatureGenerator...\n","\tStage 3 Generators:\n","\t\tFitting IdentityFeatureGenerator...\n","\t\tFitting CategoryFeatureGenerator...\n","\t\t\tFitting CategoryMemoryMinimizeFeatureGenerator...\n","\tStage 4 Generators:\n","\t\tFitting DropUniqueFeatureGenerator...\n","\tStage 5 Generators:\n","\t\tFitting DropDuplicatesFeatureGenerator...\n","\tTypes of features in original data (raw dtype, special dtypes):\n","\t\t('int', [])    : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('object', []) : 8 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\tTypes of features in processed data (raw dtype, special dtypes):\n","\t\t('category', [])  : 7 | ['workclass', 'education', 'marital-status', 'occupation', 'relationship', ...]\n","\t\t('int', [])       : 6 | ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', ...]\n","\t\t('int', ['bool']) : 1 | ['sex']\n","\t0.2s = Fit runtime\n","\t14 features in original data used to generate 14 features in processed data.\n","\tTrain Data (Processed) Memory Usage: 0.06 MB (0.0% of available memory)\n","Data preprocessing and feature engineering runtime = 0.29s ...\n","AutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n","\tTo change this, specify the eval_metric parameter of Predictor()\n","Automatically generating train/validation split with holdout_frac=0.2, Train Rows: 800, Val Rows: 200\n","User-specified model hyperparameters to be fit:\n","{\n","\t'NN_TORCH': {},\n","\t'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, 'GBMLarge'],\n","\t'CAT': {},\n","\t'XGB': {},\n","\t'FASTAI': {},\n","\t'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n","\t'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n","\t'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],\n","}\n","Excluded models: ['KNN', 'NN_TORCH'] (Specified by `excluded_model_types`)\n","Fitting 10 L1 models ...\n","Fitting model: LightGBMXT ... Training model for up to 29.71s of the 29.7s of remaining time.\n","\t0.85\t = Validation score   (accuracy)\n","\t0.72s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitting model: LightGBM ... Training model for up to 28.97s of the 28.96s of remaining time.\n","\t0.84\t = Validation score   (accuracy)\n","\t0.72s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitting model: RandomForestGini ... Training model for up to 28.22s of the 28.21s of remaining time.\n","\t0.84\t = Validation score   (accuracy)\n","\t1.53s\t = Training   runtime\n","\t0.1s\t = Validation runtime\n","Fitting model: RandomForestEntr ... Training model for up to 26.54s of the 26.53s of remaining time.\n","\t0.835\t = Validation score   (accuracy)\n","\t1.37s\t = Training   runtime\n","\t0.1s\t = Validation runtime\n","Fitting model: CatBoost ... Training model for up to 25.02s of the 25.01s of remaining time.\n","\t0.86\t = Validation score   (accuracy)\n","\t4.75s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitting model: ExtraTreesGini ... Training model for up to 20.25s of the 20.24s of remaining time.\n","\t0.815\t = Validation score   (accuracy)\n","\t0.93s\t = Training   runtime\n","\t0.11s\t = Validation runtime\n","Fitting model: ExtraTreesEntr ... Training model for up to 19.16s of the 19.15s of remaining time.\n","\t0.82\t = Validation score   (accuracy)\n","\t0.92s\t = Training   runtime\n","\t0.11s\t = Validation runtime\n","Fitting model: NeuralNetFastAI ... Training model for up to 18.09s of the 18.08s of remaining time.\n","No improvement since epoch 7: early stopping\n","\t0.84\t = Validation score   (accuracy)\n","\t1.6s\t = Training   runtime\n","\t0.02s\t = Validation runtime\n","Fitting model: XGBoost ... Training model for up to 16.45s of the 16.44s of remaining time.\n","\t0.845\t = Validation score   (accuracy)\n","\t0.4s\t = Training   runtime\n","\t0.01s\t = Validation runtime\n","Fitting model: LightGBMLarge ... Training model for up to 16.02s of the 16.01s of remaining time.\n","\t0.815\t = Validation score   (accuracy)\n","\t1.44s\t = Training   runtime\n","\t0.02s\t = Validation runtime\n","Fitting model: WeightedEnsemble_L2 ... Training model for up to 29.71s of the 14.39s of remaining time.\n","\tEnsemble Weights: {'RandomForestEntr': 0.25, 'CatBoost': 0.25, 'LightGBMXT': 0.125, 'LightGBM': 0.125, 'RandomForestGini': 0.125, 'ExtraTreesEntr': 0.125}\n","\t0.875\t = Validation score   (accuracy)\n","\t0.2s\t = Training   runtime\n","\t0.0s\t = Validation runtime\n","AutoGluon training complete, total runtime = 15.87s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 572.3 rows/s (200 batch size)\n","TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels/ag-20240917_053804\")\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"dl9RKX3ZWrGD"},"execution_count":null,"outputs":[]}]}